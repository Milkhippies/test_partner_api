{
	"info": {
		"_postman_id": "e3156a76-d4b0-4250-ac07-eb73977ca320",
		"name": "Content API v1",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Endpoints",
			"item": [
				{
					"name": "properties",
					"item": [
						{
							"name": "properties/events",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ------ Response header param test\r",
											"\r",
											"pm.test(\"Response code is 200\", function () {\r",
											"    pm.response.to.have.status(200); \r",
											"});\r",
											"\r",
											"pm.test(\"Response time < 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response code contain string 'OK'\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response headers is valid\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"X-Request-ID\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"\r",
											"// ------ Content tests\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"const responseSchema = {\r",
											"  \"title\": \"Generated schema for Root\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"hasMoreData\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"hasMoreData\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test('JSON schema is correct', function() {\r",
											"  pm.response.to.have.jsonSchema(responseSchema);\r",
											"});\r",
											"\r",
											"pm.test(\"Partial data validation in response body\", function () {\r",
											"    pm.expect(jsonData.hasMoreData).to.eql(false);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "X-API-KEY",
										"value": "{{ApIKEY}}"
									}
								],
								"url": {
									"raw": "https://{{Host}}/api/content/v1/properties/events?count=200&timestamp={{timestamp}}",
									"protocol": "https",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"content",
										"v1",
										"properties",
										"events"
									],
									"query": [
										{
											"key": "count",
											"value": "200"
										},
										{
											"key": "timestamp",
											"value": "{{timestamp}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "properties (id only)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ------ Response header param test\r",
											"\r",
											"pm.test(\"Response code is 200\", function () {\r",
											"    pm.response.to.have.status(200); \r",
											"});\r",
											"\r",
											"pm.test(\"Response time < 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response code contain string 'OK'\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response headers is valid\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"X-Request-ID\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"\r",
											"// ------ Content tests\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"const responseSchema = {\r",
											"  \"title\": \"Generated schema for Root\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"properties\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": {\r",
											"        \"type\": \"object\",\r",
											"        \"properties\": {\r",
											"          \"id\": {\r",
											"            \"type\": \"string\"\r",
											"          }\r",
											"        },\r",
											"        \"required\": [\r",
											"          \"id\"\r",
											"        ]\r",
											"      }\r",
											"    },\r",
											"    \"warnings\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": {}\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"properties\",\r",
											"    \"warnings\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test('JSON schema is correct', function() {\r",
											"  pm.response.to.have.jsonSchema(responseSchema);\r",
											"});\r",
											"\r",
											"pm.test(\"Partial data validation in response body\", function () {\r",
											"    pm.expect(jsonData.properties[0].id).to.eql(\"5019\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "X-API-KEY",
										"value": "{{ApIKEY}}"
									}
								],
								"url": {
									"raw": "https://{{Host}}/api/content/v1/properties?since=UlUtNDE5NQ%3D%3D&count=200",
									"protocol": "https",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"content",
										"v1",
										"properties"
									],
									"query": [
										{
											"key": "since",
											"value": "UlUtNDE5NQ%3D%3D"
										},
										{
											"key": "count",
											"value": "200"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "properties (all)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ------ Response header param test\r",
											"\r",
											"pm.test(\"Response code is 200\", function () {\r",
											"    pm.response.to.have.status(200); \r",
											"});\r",
											"\r",
											"pm.test(\"Response time < 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response code contain string 'OK'\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response headers is valid\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"X-Request-ID\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"\r",
											"// ------ Content tests\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Partial data validation in response body\", function () {\r",
											"    pm.expect(jsonData.properties[0].id).to.eql(\"5019\");\r",
											"    pm.expect(jsonData.properties[0].name).to.eql(\"TravelLine TEST_channel manager\");\r",
											"    pm.expect(jsonData.properties[0].description).to.eql(\"Уютные апартаменты в центре города.\");\r",
											"    pm.expect(jsonData.properties[0].images).to.be;\r",
											"    pm.expect(jsonData.properties[0].images[0].url).to.include(\"https://\");\r",
											"    pm.expect(jsonData.properties[0].stayUnitKind).to.eql(\"NightRate\");\r",
											"\r",
											"    pm.expect(jsonData.properties[0].contactInfo).to.be;\r",
											"    pm.expect(jsonData.properties[0].contactInfo.address).to.be;\r",
											"    pm.expect(jsonData.properties[0].contactInfo.address.postalCode).to.eql(\"424038\");\r",
											"    pm.expect(jsonData.properties[0].contactInfo.address.countryCode).to.eql(\"RUS\");\r",
											"    pm.expect(jsonData.properties[0].contactInfo.address.region).to.eql(\"Республика Марий Эл\");\r",
											"    pm.expect(jsonData.properties[0].contactInfo.address.regionId).to.eql(\"44\");\r",
											"    pm.expect(jsonData.properties[0].contactInfo.address.cityName).to.eql(\"Йошкар-Ола\");\r",
											"    pm.expect(jsonData.properties[0].contactInfo.address.cityId).to.eql(\"1\");\r",
											"    pm.expect(jsonData.properties[0].contactInfo.address.addressLine).to.eql(\"Республика Марий Эл, г. Йошкар-Ола, ул. Чавайнf, д. 15\");\r",
											"    pm.expect(jsonData.properties[0].contactInfo.address.latitude).to.eql(53.243325);\r",
											"    pm.expect(jsonData.properties[0].contactInfo.address.longitude).to.eql(34.363731);\r",
											"\r",
											"    pm.expect(jsonData.properties[0].contactInfo.phones).to.be;\r",
											"    pm.expect(jsonData.properties[0].contactInfo.phones[0].phoneNumber).to.eql(\"8 (947) 784-42-32\");\r",
											"    pm.expect(jsonData.properties[0].contactInfo.phones[0].techType).to.eql(\"Fax\");\r",
											"    pm.expect(jsonData.properties[0].contactInfo.phones[0].remark).to.be;\r",
											"\r",
											"    pm.expect(jsonData.properties[0].contactInfo.emails).to.be;\r",
											"    pm.expect(jsonData.properties[0].contactInfo.emails[0]).to.include(\"test@test.ru\");\r",
											"\r",
											"    pm.expect(jsonData.properties[0].policy).to.be;\r",
											"    pm.expect(jsonData.properties[0].policy.checkInTime).to.include(\"14:00\");\r",
											"    pm.expect(jsonData.properties[0].policy.checkOutTime).to.include(\"12:00\");\r",
											"\r",
											"    pm.expect(jsonData.properties[0].ratePlans[0]).to.be;\r",
											"    pm.expect(jsonData.properties[0].ratePlans[0].id).to.eql(\"229032\");\r",
											"    pm.expect(jsonData.properties[0].ratePlans[0].name).to.eql(\"Лучшая цена дня\");\r",
											"    pm.expect(jsonData.properties[0].ratePlans[0].description).to.eql(\"Самый выгодный тариф для бронирования на официальном сайте.\");\r",
											"    pm.expect(jsonData.properties[0].ratePlans[0].currency).to.eql(\"RUB\");\r",
											"\r",
											"    pm.expect(jsonData.properties[0].roomTypes[0]).to.be;\r",
											"    pm.expect(jsonData.properties[0].roomTypes[0].id).to.eql(\"306757\");\r",
											"    pm.expect(jsonData.properties[0].roomTypes[0].name).to.eql(\"Квартира на Советской\");\r",
											"    pm.expect(jsonData.properties[0].roomTypes[0].description).to.eql(\"Уютная 2х комнтатная квартира.\");\r",
											"    pm.expect(jsonData.properties[0].roomTypes[0].amenities[0].code).to.eql(\"wifi_internet\");\r",
											"    pm.expect(jsonData.properties[0].roomTypes[0].amenities[0].name).to.eql(\"Wi-Fi-интернет\");\r",
											"    pm.expect(jsonData.properties[0].roomTypes[0].images[0].url).to.include(\"https://\");\r",
											"\r",
											"    pm.expect(jsonData.properties[0].roomTypes[0].size.value).to.eql(20);\r",
											"    pm.expect(jsonData.properties[0].roomTypes[0].size.unit).to.eql(\"SquareMetre\");\r",
											"\r",
											"    pm.expect(jsonData.properties[0].roomTypes[0].categoryCode).to.eql(\"Flat\");\r",
											"    pm.expect(jsonData.properties[0].roomTypes[0].categoryName).to.eql(\"Квартира\");\r",
											"\r",
											"    pm.expect(jsonData.properties[0].roomTypes[0].address.postalCode).to.eql(\"424000\");\r",
											"    pm.expect(jsonData.properties[0].roomTypes[0].address.countryCode).to.eql(\"RUS\");\r",
											"    pm.expect(jsonData.properties[0].roomTypes[0].address.regionId).to.eql(\"44\");\r",
											"    pm.expect(jsonData.properties[0].roomTypes[0].address.cityName).to.eql(\"Йошкар-Ола\");\r",
											"    pm.expect(jsonData.properties[0].roomTypes[0].address.cityId).to.eql(\"1\");\r",
											"    pm.expect(jsonData.properties[0].roomTypes[0].address.addressLine).to.eql(\"ул. Советская, д. 142\");\r",
											"    pm.expect(jsonData.properties[0].roomTypes[0].address.latitude).to.eql(56.63206);\r",
											"    pm.expect(jsonData.properties[0].roomTypes[0].address.longitude).to.eql(47.894865);\r",
											"\r",
											"    pm.expect(jsonData.properties[0].roomTypes[0].occupancy.adultBed).to.eql(2);\r",
											"    pm.expect(jsonData.properties[0].roomTypes[0].occupancy.extraBed).to.eql(1);\r",
											"    pm.expect(jsonData.properties[0].roomTypes[0].occupancy.childWithoutBed).to.eql(1);\r",
											"\r",
											"    pm.expect(jsonData.properties[0].roomTypes[0].position).to.eql(0);\r",
											"\r",
											"});\r",
											"\r",
											"const responseSchema = {\r",
											"  \"title\": \"Generated schema for Root\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"properties\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": {\r",
											"        \"type\": \"object\",\r",
											"        \"properties\": {\r",
											"          \"id\": {\r",
											"            \"type\": \"string\"\r",
											"          },\r",
											"          \"name\": {\r",
											"            \"type\": \"string\"\r",
											"          },\r",
											"          \"description\": {\r",
											"            \"type\": \"string\"\r",
											"          },\r",
											"          \"images\": {\r",
											"            \"type\": \"array\",\r",
											"            \"items\": {\r",
											"              \"type\": \"object\",\r",
											"              \"properties\": {\r",
											"                \"url\": {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              },\r",
											"              \"required\": [\r",
											"                \"url\"\r",
											"              ]\r",
											"            }\r",
											"          },\r",
											"          \"stayUnitKind\": {\r",
											"            \"type\": \"string\"\r",
											"          },\r",
											"          \"contactInfo\": {\r",
											"            \"type\": \"object\",\r",
											"            \"properties\": {\r",
											"              \"address\": {\r",
											"                \"type\": \"object\",\r",
											"                \"properties\": {\r",
											"                  \"postalCode\": {\r",
											"                    \"type\": \"string\"\r",
											"                  },\r",
											"                  \"countryCode\": {\r",
											"                    \"type\": \"string\"\r",
											"                  },\r",
											"                  \"region\": {\r",
											"                    \"type\": \"string\"\r",
											"                  },\r",
											"                  \"regionId\": {\r",
											"                    \"type\": \"string\"\r",
											"                  },\r",
											"                  \"cityName\": {\r",
											"                    \"type\": \"string\"\r",
											"                  },\r",
											"                  \"cityId\": {\r",
											"                    \"type\": \"string\"\r",
											"                  },\r",
											"                  \"addressLine\": {\r",
											"                    \"type\": \"string\"\r",
											"                  },\r",
											"                  \"latitude\": {\r",
											"                    \"type\": \"number\"\r",
											"                  },\r",
											"                  \"longitude\": {\r",
											"                    \"type\": \"number\"\r",
											"                  }\r",
											"                },\r",
											"                \"required\": [\r",
											"                  \"postalCode\",\r",
											"                  \"countryCode\",\r",
											"                  \"region\",\r",
											"                  \"regionId\",\r",
											"                  \"cityName\",\r",
											"                  \"cityId\",\r",
											"                  \"addressLine\"\r",
											"                ]\r",
											"              },\r",
											"              \"phones\": {\r",
											"                \"type\": \"array\",\r",
											"                \"items\": {\r",
											"                  \"type\": \"object\",\r",
											"                  \"properties\": {\r",
											"                    \"phoneNumber\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"techType\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"remark\": {\r",
											"                      \"type\": \"string\"\r",
											"                    }\r",
											"                  },\r",
											"                  \"required\": [\r",
											"                    \"phoneNumber\",\r",
											"                    \"techType\",\r",
											"                    \"remark\"\r",
											"                  ]\r",
											"                }\r",
											"              },\r",
											"              \"emails\": {\r",
											"                \"type\": \"array\",\r",
											"                \"items\": {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              }\r",
											"            },\r",
											"            \"required\": [\r",
											"              \"address\",\r",
											"              \"phones\",\r",
											"              \"emails\"\r",
											"            ]\r",
											"          },\r",
											"          \"policy\": {\r",
											"            \"type\": \"object\",\r",
											"            \"properties\": {\r",
											"              \"checkInTime\": {\r",
											"                \"type\": \"string\"\r",
											"              },\r",
											"              \"checkOutTime\": {\r",
											"                \"type\": \"string\"\r",
											"              }\r",
											"            },\r",
											"            \"required\": [\r",
											"              \"checkInTime\",\r",
											"              \"checkOutTime\"\r",
											"            ]\r",
											"          },\r",
											"          \"ratePlans\": {\r",
											"            \"type\": \"array\",\r",
											"            \"items\": {\r",
											"              \"type\": \"object\",\r",
											"              \"properties\": {\r",
											"                \"id\": {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                \"name\": {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                \"description\": {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                \"currency\": {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              },\r",
											"              \"required\": [\r",
											"                \"id\",\r",
											"                \"name\",\r",
											"                \"description\",\r",
											"                \"currency\"\r",
											"              ]\r",
											"            }\r",
											"          },\r",
											"          \"roomTypes\": {\r",
											"            \"type\": \"array\",\r",
											"            \"items\": {\r",
											"              \"type\": \"object\",\r",
											"              \"properties\": {\r",
											"                \"id\": {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                \"name\": {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                \"description\": {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                \"amenities\": {\r",
											"                  \"type\": \"array\",\r",
											"                  \"items\": {\r",
											"                    \"type\": \"object\",\r",
											"                    \"properties\": {\r",
											"                      \"code\": {\r",
											"                        \"type\": \"string\"\r",
											"                      },\r",
											"                      \"name\": {\r",
											"                        \"type\": \"string\"\r",
											"                      }\r",
											"                    },\r",
											"                    \"required\": [\r",
											"                      \"code\",\r",
											"                      \"name\"\r",
											"                    ]\r",
											"                  }\r",
											"                },\r",
											"                \"images\": {\r",
											"                  \"type\": \"array\",\r",
											"                  \"items\": {\r",
											"                    \"type\": \"object\",\r",
											"                    \"properties\": {\r",
											"                      \"url\": {\r",
											"                        \"type\": \"string\"\r",
											"                      }\r",
											"                    },\r",
											"                    \"required\": [\r",
											"                      \"url\"\r",
											"                    ]\r",
											"                  }\r",
											"                },\r",
											"                \"size\": {\r",
											"                  \"type\": \"object\",\r",
											"                  \"properties\": {\r",
											"                    \"value\": {\r",
											"                      \"type\": \"number\"\r",
											"                    },\r",
											"                    \"unit\": {\r",
											"                      \"type\": \"string\"\r",
											"                    }\r",
											"                  },\r",
											"                  \"required\": [\r",
											"                    \"value\",\r",
											"                    \"unit\"\r",
											"                  ]\r",
											"                },\r",
											"                \"categoryCode\": {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                \"categoryName\": {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                \"address\": {\r",
											"                  \"type\": \"object\",\r",
											"                  \"properties\": {\r",
											"                    \"postalCode\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"countryCode\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"regionId\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"cityName\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"cityId\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"addressLine\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"latitude\": {\r",
											"                      \"type\": \"number\"\r",
											"                    },\r",
											"                    \"longitude\": {\r",
											"                      \"type\": \"number\"\r",
											"                    }\r",
											"                  },\r",
											"                  \"required\": [\r",
											"                    \"postalCode\",\r",
											"                    \"countryCode\",\r",
											"                    \"regionId\",\r",
											"                    \"cityName\",\r",
											"                    \"cityId\",\r",
											"                    \"addressLine\"\r",
											"                  ]\r",
											"                },\r",
											"                \"occupancy\": {\r",
											"                  \"type\": \"object\",\r",
											"                  \"properties\": {\r",
											"                    \"adultBed\": {\r",
											"                      \"type\": \"number\"\r",
											"                    },\r",
											"                    \"extraBed\": {\r",
											"                      \"type\": \"number\"\r",
											"                    },\r",
											"                    \"childWithoutBed\": {\r",
											"                      \"type\": \"number\"\r",
											"                    }\r",
											"                  },\r",
											"                  \"required\": [\r",
											"                    \"adultBed\",\r",
											"                    \"extraBed\",\r",
											"                    \"childWithoutBed\"\r",
											"                  ]\r",
											"                },\r",
											"                \"position\": {\r",
											"                  \"type\": \"number\"\r",
											"                }\r",
											"              },\r",
											"              \"required\": [\r",
											"                \"id\",\r",
											"                \"name\",\r",
											"                \"description\",\r",
											"                \"amenities\",\r",
											"                \"images\",\r",
											"                \"size\",\r",
											"                \"categoryCode\",\r",
											"                \"categoryName\",\r",
											"                \"occupancy\",\r",
											"                \"position\"\r",
											"              ]\r",
											"            }\r",
											"          },\r",
											"          \"services\": {\r",
											"            \"type\": \"array\",\r",
											"            \"items\": {\r",
											"              \"type\": \"object\",\r",
											"              \"properties\": {\r",
											"                \"id\": {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                \"name\": {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                \"description\": {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                \"kind\": {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                \"mealPlanCode\": {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                \"mealPlanName\": {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              },\r",
											"              \"required\": [\r",
											"                \"id\",\r",
											"                \"name\",\r",
											"                \"description\",\r",
											"                \"kind\"\r",
											"              ]\r",
											"            }\r",
											"          },\r",
											"          \"stars\": {\r",
											"            \"type\": \"number\"\r",
											"          }\r",
											"        },\r",
											"        \"required\": [\r",
											"          \"id\",\r",
											"          \"name\",\r",
											"          \"description\",\r",
											"          \"images\",\r",
											"          \"stayUnitKind\",\r",
											"          \"contactInfo\",\r",
											"          \"policy\",\r",
											"          \"ratePlans\",\r",
											"          \"roomTypes\",\r",
											"          \"services\"\r",
											"        ]\r",
											"      }\r",
											"    },\r",
											"    \"warnings\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": {}\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"properties\",\r",
											"    \"warnings\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test('JSON schema is correct', function() {\r",
											"  pm.response.to.have.jsonSchema(responseSchema);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "X-API-KEY",
										"value": "{{ApIKEY}}"
									}
								],
								"url": {
									"raw": "https://{{Host}}/api/content/v1/properties?since=UlUtNDE5NQ%3D%3D&count=200&include=All",
									"protocol": "https",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"content",
										"v1",
										"properties"
									],
									"query": [
										{
											"key": "since",
											"value": "UlUtNDE5NQ%3D%3D"
										},
										{
											"key": "count",
											"value": "200"
										},
										{
											"key": "include",
											"value": "All"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "properties/{propertyId}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ------ Response header param test\r",
											"\r",
											"pm.test(\"Response code is 200\", function () {\r",
											"    pm.response.to.have.status(200); \r",
											"});\r",
											"\r",
											"pm.test(\"Response time < 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response code contain string 'OK'\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response headers is valid\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"X-Request-ID\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"\r",
											"// ------ Content tests\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Partial data validation in response body\", function () {\r",
											"    pm.expect(jsonData.id).to.eql(\"8155\");\r",
											"    pm.expect(jsonData.name).to.eql(\"PartnerAPI для интеграции 2\");\r",
											"    pm.expect(jsonData.description).to.eql(\"Отель официально подтверждает уровень 3-х звездочного отеля своим сервисом и качеством оказываемых услуг.\\nДо пляжа можно дойти всего за 1 минуту. Отель расположен в самом сердце города, в 80 метрах от центрального песчаного пляжа и набережной. К услугам гостей бесплатный Wi-Fi и бесплатная частная парковка на 12 автомобилей.\\nСтойка регистрации работает круглосуточно.\\nКаждое утро сервируют завтрак «шведский стол» со свежемолотым кофе.\");\r",
											"    pm.expect(jsonData.images).to.be;\r",
											"    pm.expect(jsonData.images[0].url).to.include(\"https://\");\r",
											"    pm.expect(jsonData.stars).to.eql(3);\r",
											"    pm.expect(jsonData.stayUnitKind).to.eql(\"NightRate\");\r",
											"\r",
											"    pm.expect(jsonData.contactInfo).to.be;\r",
											"    pm.expect(jsonData.contactInfo.address).to.be;\r",
											"    pm.expect(jsonData.contactInfo.address.postalCode).to.eql(\"424008\");\r",
											"    pm.expect(jsonData.contactInfo.address.countryCode).to.eql(\"RUS\");\r",
											"    pm.expect(jsonData.contactInfo.address.region).to.eql(\"Республика Марий Эл\");\r",
											"    pm.expect(jsonData.contactInfo.address.regionId).to.eql(\"44\");\r",
											"    pm.expect(jsonData.contactInfo.address.cityName).to.eql(\"Йошкар-Ола\");\r",
											"    pm.expect(jsonData.contactInfo.address.cityId).to.eql(\"1\");\r",
											"    pm.expect(jsonData.contactInfo.address.addressLine).to.eql(\"Республика Марий Эл, Республика Марий Эл район, г. Йошкар-Ола, ул. Петрова, д. 21\");\r",
											"    pm.expect(jsonData.contactInfo.address.latitude).to.eql(45.036738);\r",
											"    pm.expect(jsonData.contactInfo.address.longitude).to.eql(38.973696);\r",
											"\r",
											"    pm.expect(jsonData.contactInfo.phones).to.be;\r",
											"    pm.expect(jsonData.contactInfo.phones[0].phoneNumber).to.eql(\"+7 (861) 2-750-750\");\r",
											"    pm.expect(jsonData.contactInfo.phones[0].techType).to.eql(\"Fax\");\r",
											"    pm.expect(jsonData.contactInfo.phones[0].remark).to.be;\r",
											"\r",
											"    pm.expect(jsonData.contactInfo.emails).to.be;\r",
											"    pm.expect(jsonData.contactInfo.emails[0]).to.include(\"aurhotel_test@mail.ru\");\r",
											"\r",
											"    pm.expect(jsonData.policy).to.be;\r",
											"    pm.expect(jsonData.policy.checkInTime).to.include(\"14:00\");\r",
											"    pm.expect(jsonData.policy.checkOutTime).to.include(\"12:00\");\r",
											"\r",
											"    pm.expect(jsonData.ratePlans[0]).to.be;\r",
											"    pm.expect(jsonData.ratePlans[0].id).to.eql(\"335370\");\r",
											"    pm.expect(jsonData.ratePlans[0].name).to.eql(\"Лучшая цена дня\");\r",
											"    pm.expect(jsonData.ratePlans[0].description).to.eql(\"Самый выгодный тариф для бронирования на официальном сайте.\");\r",
											"    pm.expect(jsonData.ratePlans[0].currency).to.eql(\"RUB\");\r",
											"\r",
											"    pm.expect(jsonData.roomTypes[0]).to.be;\r",
											"    pm.expect(jsonData.roomTypes[0].id).to.eql(\"349642\");\r",
											"    pm.expect(jsonData.roomTypes[0].name).to.eql(\"Стандарт\");\r",
											"    pm.expect(jsonData.roomTypes[0].description).to.eql(\"Комфортный стандартный номер с красивым декором.\");\r",
											"    pm.expect(jsonData.roomTypes[0].amenities[1].code).to.eql(\"wifi_internet\");\r",
											"    pm.expect(jsonData.roomTypes[0].amenities[1].name).to.eql(\"Wi-Fi-интернет\");\r",
											"    pm.expect(jsonData.roomTypes[0].images[0].url).to.include(\"https://\");\r",
											"\r",
											"    pm.expect(jsonData.roomTypes[0].size.value).to.eql(0); // ошибка?\r",
											"    pm.expect(jsonData.roomTypes[0].size.unit).to.eql(\"SquareMetre\");\r",
											"\r",
											"    pm.expect(jsonData.roomTypes[0].categoryCode).to.eql(\"Room\");\r",
											"    pm.expect(jsonData.roomTypes[0].categoryName).to.eql(\"Номер\");\r",
											"\r",
											"    pm.expect(jsonData.roomTypes[0].occupancy.adultBed).to.eql(2);\r",
											"    pm.expect(jsonData.roomTypes[0].occupancy.extraBed).to.eql(1);\r",
											"    pm.expect(jsonData.roomTypes[0].occupancy.childWithoutBed).to.eql(1);\r",
											"\r",
											"    pm.expect(jsonData.roomTypes[0].position).to.eql(0);\r",
											"\r",
											"});\r",
											"\r",
											"const responseSchema = {\r",
											"  \"title\": \"Generated schema for Root\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"id\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"name\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"description\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"currency\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"images\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": {\r",
											"        \"type\": \"object\",\r",
											"        \"properties\": {\r",
											"          \"url\": {\r",
											"            \"type\": \"string\"\r",
											"          }\r",
											"        },\r",
											"        \"required\": [\r",
											"          \"url\"\r",
											"        ]\r",
											"      }\r",
											"    },\r",
											"    \"stars\": {\r",
											"      \"type\": \"number\"\r",
											"    },\r",
											"    \"stayUnitKind\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"contactInfo\": {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"address\": {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"postalCode\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"countryCode\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"region\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"regionId\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"cityName\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"cityId\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"addressLine\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"latitude\": {\r",
											"              \"type\": \"number\"\r",
											"            },\r",
											"            \"longitude\": {\r",
											"              \"type\": \"number\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"postalCode\",\r",
											"            \"countryCode\",\r",
											"            \"region\",\r",
											"            \"regionId\",\r",
											"            \"cityName\",\r",
											"            \"cityId\",\r",
											"            \"addressLine\",\r",
											"            \"latitude\",\r",
											"            \"longitude\"\r",
											"          ]\r",
											"        },\r",
											"        \"phones\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {\r",
											"            \"type\": \"object\",\r",
											"            \"properties\": {\r",
											"              \"phoneNumber\": {\r",
											"                \"type\": \"string\"\r",
											"              },\r",
											"              \"techType\": {\r",
											"                \"type\": \"string\"\r",
											"              },\r",
											"              \"remark\": {\r",
											"                \"type\": \"string\"\r",
											"              }\r",
											"            },\r",
											"            \"required\": [\r",
											"              \"phoneNumber\",\r",
											"              \"techType\",\r",
											"              \"remark\"\r",
											"            ]\r",
											"          }\r",
											"        },\r",
											"        \"emails\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {\r",
											"            \"type\": \"string\"\r",
											"          }\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"address\",\r",
											"        \"phones\",\r",
											"        \"emails\"\r",
											"      ]\r",
											"    },\r",
											"    \"policy\": {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"checkInTime\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"checkOutTime\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"checkInTime\",\r",
											"        \"checkOutTime\"\r",
											"      ]\r",
											"    },\r",
											"    \"ratePlans\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": {\r",
											"        \"type\": \"object\",\r",
											"        \"properties\": {\r",
											"          \"id\": {\r",
											"            \"type\": \"string\"\r",
											"          },\r",
											"          \"name\": {\r",
											"            \"type\": \"string\"\r",
											"          },\r",
											"          \"description\": {\r",
											"            \"type\": \"string\"\r",
											"          },\r",
											"          \"currency\": {\r",
											"            \"type\": \"string\"\r",
											"          }\r",
											"        },\r",
											"        \"required\": [\r",
											"          \"id\",\r",
											"          \"name\",\r",
											"          \"description\",\r",
											"          \"currency\"\r",
											"        ]\r",
											"      }\r",
											"    },\r",
											"    \"roomTypes\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": {\r",
											"        \"type\": \"object\",\r",
											"        \"properties\": {\r",
											"          \"id\": {\r",
											"            \"type\": \"string\"\r",
											"          },\r",
											"          \"name\": {\r",
											"            \"type\": \"string\"\r",
											"          },\r",
											"          \"description\": {\r",
											"            \"type\": \"string\"\r",
											"          },\r",
											"          \"amenities\": {\r",
											"            \"type\": \"array\",\r",
											"            \"items\": {\r",
											"              \"type\": \"object\",\r",
											"              \"properties\": {\r",
											"                \"code\": {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                \"name\": {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              },\r",
											"              \"required\": [\r",
											"                \"code\",\r",
											"                \"name\"\r",
											"              ]\r",
											"            }\r",
											"          },\r",
											"          \"images\": {\r",
											"            \"type\": \"array\",\r",
											"            \"items\": {\r",
											"              \"type\": \"object\",\r",
											"              \"properties\": {\r",
											"                \"url\": {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              },\r",
											"              \"required\": [\r",
											"                \"url\"\r",
											"              ]\r",
											"            }\r",
											"          },\r",
											"          \"size\": {\r",
											"            \"type\": \"object\",\r",
											"            \"properties\": {\r",
											"              \"value\": {\r",
											"                \"type\": \"number\"\r",
											"              },\r",
											"              \"unit\": {\r",
											"                \"type\": \"string\"\r",
											"              }\r",
											"            },\r",
											"            \"required\": [\r",
											"              \"value\",\r",
											"              \"unit\"\r",
											"            ]\r",
											"          },\r",
											"          \"categoryCode\": {\r",
											"            \"type\": \"string\"\r",
											"          },\r",
											"          \"categoryName\": {\r",
											"            \"type\": \"string\"\r",
											"          },\r",
											"          \"occupancy\": {\r",
											"            \"type\": \"object\",\r",
											"            \"properties\": {\r",
											"              \"adultBed\": {\r",
											"                \"type\": \"number\"\r",
											"              },\r",
											"              \"extraBed\": {\r",
											"                \"type\": \"number\"\r",
											"              },\r",
											"              \"childWithoutBed\": {\r",
											"                \"type\": \"number\"\r",
											"              }\r",
											"            },\r",
											"            \"required\": [\r",
											"              \"adultBed\",\r",
											"              \"extraBed\",\r",
											"              \"childWithoutBed\"\r",
											"            ]\r",
											"          },\r",
											"          \"position\": {\r",
											"            \"type\": \"number\"\r",
											"          }\r",
											"        },\r",
											"        \"required\": [\r",
											"          \"id\",\r",
											"          \"name\",\r",
											"          \"description\",\r",
											"          \"amenities\",\r",
											"          \"images\",\r",
											"          \"size\",\r",
											"          \"categoryCode\",\r",
											"          \"categoryName\",\r",
											"          \"occupancy\",\r",
											"          \"position\"\r",
											"        ]\r",
											"      }\r",
											"    },\r",
											"    \"services\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": {\r",
											"        \"type\": \"object\",\r",
											"        \"properties\": {\r",
											"          \"id\": {\r",
											"            \"type\": \"string\"\r",
											"          },\r",
											"          \"name\": {\r",
											"            \"type\": \"string\"\r",
											"          },\r",
											"          \"description\": {\r",
											"            \"type\": \"string\"\r",
											"          },\r",
											"          \"kind\": {\r",
											"            \"type\": \"string\"\r",
											"          },\r",
											"          \"mealPlanCode\": {\r",
											"            \"type\": \"string\"\r",
											"          },\r",
											"          \"mealPlanName\": {\r",
											"            \"type\": \"string\"\r",
											"          }\r",
											"        },\r",
											"        \"required\": [\r",
											"          \"id\",\r",
											"          \"name\",\r",
											"          \"description\",\r",
											"          \"kind\"\r",
											"        ]\r",
											"      }\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"id\",\r",
											"    \"name\",\r",
											"    \"description\",\r",
											"    \"currency\",\r",
											"    \"images\",\r",
											"    \"stars\",\r",
											"    \"stayUnitKind\",\r",
											"    \"contactInfo\",\r",
											"    \"policy\",\r",
											"    \"ratePlans\",\r",
											"    \"roomTypes\",\r",
											"    \"services\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(' Heavy JSON schema is correct', function() {\r",
											"  pm.response.to.have.jsonSchema(responseSchema);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "X-API-KEY",
										"value": "{{ApIKEY}}"
									}
								],
								"url": {
									"raw": "https://{{Host}}/api/content/v1/properties/{{propertyId}}",
									"protocol": "https",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"content",
										"v1",
										"properties",
										"{{propertyId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "meal-plans",
					"item": [
						{
							"name": "meal-plans",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ------ Response header param test\r",
											"\r",
											"pm.test(\"Response code is 200\", function () {\r",
											"    pm.response.to.have.status(200); \r",
											"});\r",
											"\r",
											"pm.test(\"Response time < 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response code contain string 'OK'\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response headers is valid\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"X-Request-ID\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"\r",
											"// ------ Content tests\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"const responseSchema = {\r",
											"  \"title\": \"Generated schema for Root\",\r",
											"  \"type\": \"array\",\r",
											"  \"items\": {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"      \"code\": {\r",
											"        \"type\": \"string\"\r",
											"      },\r",
											"      \"name\": {\r",
											"        \"type\": \"string\"\r",
											"      }\r",
											"    },\r",
											"    \"required\": [\r",
											"      \"code\",\r",
											"      \"name\"\r",
											"    ]\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test('JSON schema is correct', function () {\r",
											"  pm.response.to.have.jsonSchema(responseSchema);\r",
											"});\r",
											"\r",
											"const idealResponse = [\r",
											"    {\r",
											"        \"code\": \"AllInclusive\",\r",
											"        \"name\": \"Все включено\"\r",
											"    },\r",
											"    {\r",
											"        \"code\": \"BuffetBreakfast\",\r",
											"        \"name\": \"Завтрак (шведский стол)\"\r",
											"    },\r",
											"    {\r",
											"        \"code\": \"ContinentalBreakfast\",\r",
											"        \"name\": \"Континентальный завтрак\"\r",
											"    },\r",
											"    {\r",
											"        \"code\": \"EnglishBreakfast\",\r",
											"        \"name\": \"Английский завтрак\"\r",
											"    },\r",
											"    {\r",
											"        \"code\": \"FullBoard\",\r",
											"        \"name\": \"Полный пансион\"\r",
											"    },\r",
											"    {\r",
											"        \"code\": \"HalfBoard\",\r",
											"        \"name\": \"Полупансион\"\r",
											"    },\r",
											"    {\r",
											"        \"code\": \"BreakFast\",\r",
											"        \"name\": \"Завтрак\"\r",
											"    },\r",
											"    {\r",
											"        \"code\": \"Lunch\",\r",
											"        \"name\": \"Обед\"\r",
											"    },\r",
											"    {\r",
											"        \"code\": \"Dinner\",\r",
											"        \"name\": \"Ужин\"\r",
											"    },\r",
											"    {\r",
											"        \"code\": \"FullBoardBuffet\",\r",
											"        \"name\": \"Полный пансион \\\"шведский стол\\\"\"\r",
											"    },\r",
											"    {\r",
											"        \"code\": \"FullBoardCarte\",\r",
											"        \"name\": \"Полный пансион \\\"заказное меню\\\"\"\r",
											"    },\r",
											"    {\r",
											"        \"code\": \"BuffetDinner\",\r",
											"        \"name\": \"Ужин \\\"шведский стол\\\"\"\r",
											"    },\r",
											"    {\r",
											"        \"code\": \"DinnerCarte\",\r",
											"        \"name\": \"Ужин \\\"заказное меню\\\"\"\r",
											"    },\r",
											"    {\r",
											"        \"code\": \"Custom\",\r",
											"        \"name\": \"Свой тип питания\"\r",
											"    },\r",
											"    {\r",
											"        \"code\": \"HalfBoardLunch\",\r",
											"        \"name\": \"Полупансион (завтрак + обед)\"\r",
											"    },\r",
											"    {\r",
											"        \"code\": \"HalfBoardDinner\",\r",
											"        \"name\": \"Полупансион (завтрак + ужин)\"\r",
											"    },\r",
											"    {\r",
											"        \"code\": \"AmericanBreakfast\",\r",
											"        \"name\": \"Завтрак \\\"Американский\\\"\"\r",
											"    },\r",
											"    {\r",
											"        \"code\": \"HalfBoardLunchDinner\",\r",
											"        \"name\": \"Полупансион (обед и ужин)\"\r",
											"    },\r",
											"    {\r",
											"        \"code\": \"UltraAllInclusive\",\r",
											"        \"name\": \"Ультра все включено\"\r",
											"    },\r",
											"    {\r",
											"        \"code\": \"RoomOnly\",\r",
											"        \"name\": \"Без питания\"\r",
											"    }\r",
											"]\r",
											"\r",
											"pm.test('Response matches reference', function () {\r",
											"    const isEqual = _.isEqual(idealResponse, jsonData);\r",
											"    pm.expect(isEqual).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "X-API-KEY",
										"value": "{{ApIKEY}}",
										"type": "default"
									}
								],
								"url": {
									"raw": "https://{{Host}}/api/content/v1/meal-plans",
									"protocol": "https",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"content",
										"v1",
										"meal-plans"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "room-type-categories",
					"item": [
						{
							"name": "room-type-categories",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ------ Response header param test\r",
											"\r",
											"pm.test(\"Response code is 200\", function () {\r",
											"    pm.response.to.have.status(200); \r",
											"});\r",
											"\r",
											"pm.test(\"Response time < 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response code contain string 'OK'\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response headers is valid\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"X-Request-ID\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"\r",
											"// ------ Content tests\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"const responseSchema = {\r",
											"  \"title\": \"Generated schema for Root\",\r",
											"  \"type\": \"array\",\r",
											"  \"items\": {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"      \"code\": {\r",
											"        \"type\": \"string\"\r",
											"      },\r",
											"      \"name\": {\r",
											"        \"type\": \"string\"\r",
											"      }\r",
											"    },\r",
											"    \"required\": [\r",
											"      \"code\",\r",
											"      \"name\"\r",
											"    ]\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test('JSON schema is correct', function () {\r",
											"  pm.response.to.have.jsonSchema(responseSchema);\r",
											"});\r",
											"\r",
											"const idealResponse = [\r",
											"    {\r",
											"        \"code\": \"Room\",\r",
											"        \"name\": \"Номер\"\r",
											"    },\r",
											"    {\r",
											"        \"code\": \"PlaceInRoom\",\r",
											"        \"name\": \"Место в номере\"\r",
											"    },\r",
											"    {\r",
											"        \"code\": \"Cottage\",\r",
											"        \"name\": \"Коттедж\"\r",
											"    },\r",
											"    {\r",
											"        \"code\": \"Apartments\",\r",
											"        \"name\": \"Аппартаменты\"\r",
											"    },\r",
											"    {\r",
											"        \"code\": \"Studio\",\r",
											"        \"name\": \"Студия\"\r",
											"    },\r",
											"    {\r",
											"        \"code\": \"Flat\",\r",
											"        \"name\": \"Квартира\"\r",
											"    },\r",
											"    {\r",
											"        \"code\": \"House\",\r",
											"        \"name\": \"Дом\"\r",
											"    },\r",
											"    {\r",
											"        \"code\": \"Villa\",\r",
											"        \"name\": \"Вилла\"\r",
											"    }\r",
											"]\r",
											"\r",
											"pm.test('Response matches reference', function () {\r",
											"    const isEqual = _.isEqual(idealResponse, jsonData);\r",
											"    pm.expect(isEqual).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "X-API-KEY",
										"value": "{{ApIKEY}}",
										"type": "default"
									}
								],
								"url": {
									"raw": "https://{{Host}}/api/content/v1/room-type-categories",
									"protocol": "https",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"content",
										"v1",
										"room-type-categories"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "room-amenity-categories",
					"item": [
						{
							"name": "room-amenity-categories",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ------ Response header param test\r",
											"\r",
											"pm.test(\"Response code is 200\", function () {\r",
											"    pm.response.to.have.status(200); \r",
											"});\r",
											"\r",
											"pm.test(\"Response time < 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response code contain string 'OK'\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response headers is valid\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"X-Request-ID\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"\r",
											"// ------ Content tests\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"const responseSchema = {\r",
											"  \"title\": \"Generated schema for Root\",\r",
											"  \"type\": \"array\",\r",
											"  \"items\": {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"      \"name\": {\r",
											"        \"type\": \"string\"\r",
											"      },\r",
											"      \"amenities\": {\r",
											"        \"type\": \"array\",\r",
											"        \"items\": {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"name\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"code\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"name\",\r",
											"            \"code\"\r",
											"          ]\r",
											"        }\r",
											"      }\r",
											"    },\r",
											"    \"required\": [\r",
											"      \"name\",\r",
											"      \"amenities\"\r",
											"    ]\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test('JSON schema is correct', function () {\r",
											"  pm.response.to.have.jsonSchema(responseSchema);\r",
											"});\r",
											"\r",
											"const idealInternetPhone = {\r",
											"    \"name\": \"Интернет/телефония\",\r",
											"    \"amenities\": [\r",
											"        {\r",
											"            \"name\": \"Wi-Fi-интернет\",\r",
											"            \"code\": \"wifi_internet\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"интернет\",\r",
											"            \"code\": \"internet\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"телефон\",\r",
											"            \"code\": \"telephone\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"IP-телефон\",\r",
											"            \"code\": \"ip_telephone\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"две телефонные линии\",\r",
											"            \"code\": \"two_line_phone\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"роутер\",\r",
											"            \"code\": \"121\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"внутренний телефон\",\r",
											"            \"code\": \"in_room_telephone\"\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"\r",
											"const idealVideoAudio = {\r",
											"    \"name\": \"Видео/аудио\",\r",
											"    \"amenities\": [\r",
											"        {\r",
											"            \"name\": \"телевизор\",\r",
											"            \"code\": \"tv\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"спутниковое телевидение\",\r",
											"            \"code\": \"satellite_television\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"кабельное телевидение\",\r",
											"            \"code\": \"cable_television\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"интерактивное телевидение\",\r",
											"            \"code\": \"interactive_web_tv\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"DVD-плеер\",\r",
											"            \"code\": \"dvd_player\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"подборка видео/аудио\",\r",
											"            \"code\": \"movies\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"домашний кинотеатр\",\r",
											"            \"code\": \"home_cinema\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"караоке\",\r",
											"            \"code\": \"karaoke\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"музыкальный центр\",\r",
											"            \"code\": \"media_center\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"телевизор с плоским экраном\",\r",
											"            \"code\": \"flat_screen_TV\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"цифровое тв\",\r",
											"            \"code\": \"digital_tv\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"HBO (Американская телевизионная сеть)\",\r",
											"            \"code\": \"hbo\"\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"\r",
											"const idealOther = {\r",
											"    \"name\": \"Прочее\",\r",
											"    \"amenities\": [\r",
											"        {\r",
											"            \"name\": \"гладильная доска\",\r",
											"            \"code\": \"ironing_board\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"две комнаты\",\r",
											"            \"code\": \"two_rooms\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"кухня\",\r",
											"            \"code\": \"kitchen\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"звуконепроницаемые стены и окна\",\r",
											"            \"code\": \"soundproofed_room\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"мини-бар\",\r",
											"            \"code\": \"minibar\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"камин\",\r",
											"            \"code\": \"fireplace\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"письменные принадлежности\",\r",
											"            \"code\": \"writing_utensils\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"свежая пресса\",\r",
											"            \"code\": \"daily_press\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"чайный набор\",\r",
											"            \"code\": \"tea_set\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"набор посуды\",\r",
											"            \"code\": \"set_of_dishes\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"обслуживание номеров\",\r",
											"            \"code\": \"maid_service\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"информационная карта, меню\",\r",
											"            \"code\": \"information_card\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"сейф\",\r",
											"            \"code\": \"safe\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"минеральная вода\",\r",
											"            \"code\": \"mineral_water\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"посудомоечная машина\",\r",
											"            \"code\": \"dishwasher\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"пресс для глажения брюк\",\r",
											"            \"code\": \"trouser_press\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"стиральная машина\",\r",
											"            \"code\": \"washing_machine\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"чайник\",\r",
											"            \"code\": \"kettle\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"мини-кухня\",\r",
											"            \"code\": \"mini_kitchen\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"кухонный уголок\",\r",
											"            \"code\": \"kitchenette\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"москитная сетка\",\r",
											"            \"code\": \"window_screen\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"стаканы и чашки\",\r",
											"            \"code\": \"glasses\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"две спальни\",\r",
											"            \"code\": \"two_bedrooms\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"кабинет\",\r",
											"            \"code\": \"cabinet\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"ламинат\",\r",
											"            \"code\": \"laminate\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"мангал\",\r",
											"            \"code\": \"outdoor_grill\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"уничтожитель мусора, встроенный в раковину\",\r",
											"            \"code\": \"garbage_disposal\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"кухонная посуда\",\r",
											"            \"code\": \"cookware\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"три спальни\",\r",
											"            \"code\": \"three_bedrooms\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"стиральная машина и сушилка\",\r",
											"            \"code\": \"washer_dryer\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"три комнаты\",\r",
											"            \"code\": \"three_rooms\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"тостер\",\r",
											"            \"code\": \"toaster\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"плиточное покрытие\",\r",
											"            \"code\": \"tile_covering\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"пробковый пол\",\r",
											"            \"code\": \"cork_flooring\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"паркет\",\r",
											"            \"code\": \"hardwood_floors\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"меню подушек\",\r",
											"            \"code\": \"pillows_menu\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"принадлежности для барбекю\",\r",
											"            \"code\": \"barbecue_facilities\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"ковровое покрытие\",\r",
											"            \"code\": \"carpet_covering\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"центральное кондиционирование\",\r",
											"            \"code\": \"central_air_conditioning\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"сушилка для белья\",\r",
											"            \"code\": \"clothes_airer\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"кофейный столик\",\r",
											"            \"code\": \"coffee_end_tables\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"косметическое зеркало\",\r",
											"            \"code\": \"cosmetic_mirror\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"обеденная зона\",\r",
											"            \"code\": \"dinner_zone\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"туалетный столик\",\r",
											"            \"code\": \"dresser\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"питьевая вода\",\r",
											"            \"code\": \"drinking_water\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"столовые приборы\",\r",
											"            \"code\": \"flatware\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"четыре комнаты\",\r",
											"            \"code\": \"four_rooms\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"высокие потолки\",\r",
											"            \"code\": \"high_ceilings\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"кухонная утварь\",\r",
											"            \"code\": \"kitchen_utensils\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"гостиная зона\",\r",
											"            \"code\": \"living_area\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"Номер для некурящих\",\r",
											"            \"code\": \"non_smoking_room\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"открытый бассейн\",\r",
											"            \"code\": \"pool\"\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"\r",
											"const idealTerraria = {\r",
											"    \"name\": \"Внешняя территория и вид из окон\",\r",
											"    \"amenities\": [\r",
											"        {\r",
											"            \"name\": \"балкон\",\r",
											"            \"code\": \"balcony\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"балкон с красивым видом\",\r",
											"            \"code\": \"balcony_with_view\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"балкон с шезлонгом\",\r",
											"            \"code\": \"balcony_with_deck_chairs\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"лоджия\",\r",
											"            \"code\": \"loggia\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"терраса\",\r",
											"            \"code\": \"terrace\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"форточка\",\r",
											"            \"code\": \"window_leaf\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"вид во двор\",\r",
											"            \"code\": \"court_view\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"вид на ипподром\",\r",
											"            \"code\": \"view_race_track\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"вид на озеро\",\r",
											"            \"code\": \"lake_view\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"вид на горы\",\r",
											"            \"code\": \"mountain_view\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"вид на стадион\",\r",
											"            \"code\": \"view_to_stadium\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"окна выходят в атриум отеля\",\r",
											"            \"code\": \"window_to_hotel_atrium\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"отдельный вход в номер\",\r",
											"            \"code\": \"private_room_entrance\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"вид на город\",\r",
											"            \"code\": \"city_view\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"панорамные окна\",\r",
											"            \"code\": \"floor_to_ceiling_windows\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"вид на сад\",\r",
											"            \"code\": \"garden_view\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"вид на парк\",\r",
											"            \"code\": \"park_view\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"вид на реку\",\r",
											"            \"code\": \"river_view\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"вид на море\",\r",
											"            \"code\": \"sea_view\"\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"\r",
											"const idealBath = {\r",
											"    \"name\": \"Ванная комната\",\r",
											"    \"amenities\": [\r",
											"        {\r",
											"            \"name\": \"ванная комната\",\r",
											"            \"code\": \"bathroom\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"ванна или душевая кабина\",\r",
											"            \"code\": \"bath_or_shower\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"гидромассажная ванна\",\r",
											"            \"code\": \"hydromassage_bath\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"биде\",\r",
											"            \"code\": \"bidet\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"банные полотенца\",\r",
											"            \"code\": \"bath_towels\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"тапочки\",\r",
											"            \"code\": \"slippers\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"две ванные комнаты\",\r",
											"            \"code\": \"two_bathrooms\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"душевая кабина\",\r",
											"            \"code\": \"shower_cabin\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"ванна\",\r",
											"            \"code\": \"bathtub\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"ванная с джакузи\",\r",
											"            \"code\": \"jacuzzi_bathroom\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"аэромассажная ванна\",\r",
											"            \"code\": \"aeromassage_bath\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"гидромассажный душ\",\r",
											"            \"code\": \"hydromassage_shower\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"санузел\",\r",
											"            \"code\": \"bathroom_with_wc\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"дополнительный санузел\",\r",
											"            \"code\": \"additional_bathroom_with_wc\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"дополнительная ванная комната\",\r",
											"            \"code\": \"additional_bathroom\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"водонагреватель\",\r",
											"            \"code\": \"water_heater\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"теплый пол\",\r",
											"            \"code\": \"warm_floor\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"банные принадлежности\",\r",
											"            \"code\": \"bathroom_amenities\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"халаты\",\r",
											"            \"code\": \"bathrobe\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"пляжные полотенца\",\r",
											"            \"code\": \"beach_towels\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"гигиенические средства\",\r",
											"            \"code\": \"hygienic_aids\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"косметические средства\",\r",
											"            \"code\": \"beauty_aids\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"сауна\",\r",
											"            \"code\": \"sauna\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"гостиничная парфюмерия\",\r",
											"            \"code\": \"bathroom_amenity_set\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"три ванные комнаты\",\r",
											"            \"code\": \"three_bathrooms\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"туалет\",\r",
											"            \"code\": \"toilet\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"Раздельный санузел\",\r",
											"            \"code\": \"separate_closet\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"раковина\",\r",
											"            \"code\": \"sink\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"туалетные средства\",\r",
											"            \"code\": \"toiletry\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"общая ванная комната\",\r",
											"            \"code\": \"shared_bathroom\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"унитаз\",\r",
											"            \"code\": \"toilet_bowl\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"внешняя ванная комната\",\r",
											"            \"code\": \"outside_bathroom\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"санузел на этаже\",\r",
											"            \"code\": \"shared_bathroom_and_toilet_on_floor\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"душ\",\r",
											"            \"code\": \"shower\"\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"\r",
											"const idealVideo = {\r",
											"    \"name\": \"Video dan audio\",\r",
											"    \"amenities\": [\r",
											"        {\r",
											"            \"name\": \"телевизор\",\r",
											"            \"code\": \"tv\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"спутниковое телевидение\",\r",
											"            \"code\": \"satellite_television\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"DVD-плеер\",\r",
											"            \"code\": \"dvd_player\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"два телевизора\",\r",
											"            \"code\": \"two_tv\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"кабельное телевидение\",\r",
											"            \"code\": \"cable_television\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"интерактивное телевидение\",\r",
											"            \"code\": \"interactive_web_tv\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"подборка видео/аудио\",\r",
											"            \"code\": \"movies\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"домашний кинотеатр\",\r",
											"            \"code\": \"home_cinema\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"караоке\",\r",
											"            \"code\": \"karaoke\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"музыкальный центр\",\r",
											"            \"code\": \"media_center\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"телевизор с плоским экраном\",\r",
											"            \"code\": \"flat_screen_TV\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"HBO (Американская телевизионная сеть)\",\r",
											"            \"code\": \"hbo\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"китайский канал\",\r",
											"            \"code\": \"chinese_channel\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"цифровое тв\",\r",
											"            \"code\": \"digital_tv\"\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"\r",
											"const idealInternet = {\r",
											"    \"name\": \"Internet dan telephone\",\r",
											"    \"amenities\": [\r",
											"        {\r",
											"            \"name\": \"Wi-Fi-интернет\",\r",
											"            \"code\": \"wifi_internet\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"интернет\",\r",
											"            \"code\": \"internet\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"внутренний телефон\",\r",
											"            \"code\": \"in_room_telephone\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"телефон\",\r",
											"            \"code\": \"telephone\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"IP-телефон\",\r",
											"            \"code\": \"ip_telephone\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"две телефонные линии\",\r",
											"            \"code\": \"two_line_phone\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"роутер\",\r",
											"            \"code\": \"121\"\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"\r",
											"const idealFurniture = {\r",
											"    \"name\": \"Мебель\",\r",
											"    \"amenities\": [\r",
											"        {\r",
											"            \"name\": \"стулья\",\r",
											"            \"code\": \"chairs\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"диван\",\r",
											"            \"code\": \"sofa_bed\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"шкаф для одежды\",\r",
											"            \"code\": \"closet_for_clothes\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"журнальный столик\",\r",
											"            \"code\": \"journal_table\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"комод\",\r",
											"            \"code\": \"commode\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"ковер\",\r",
											"            \"code\": \"carpet\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"диван-кровать\",\r",
											"            \"code\": \"studio_couch\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"стул\",\r",
											"            \"code\": \"chair\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"кресла\",\r",
											"            \"code\": \"armchairs\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"тумбы\",\r",
											"            \"code\": \"nightstands\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"гардеробная\",\r",
											"            \"code\": \"wardrobe\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"вешалки\",\r",
											"            \"code\": \"hangers\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"письменный стол\",\r",
											"            \"code\": \"desk\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"стол для переговоров\",\r",
											"            \"code\": \"conference_table\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"обеденный стол\",\r",
											"            \"code\": \"dinner_table\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"багажная тумба\",\r",
											"            \"code\": \"luggage_stand\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"барная стойка\",\r",
											"            \"code\": \"bar\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"зеркало\",\r",
											"            \"code\": \"mirror\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"пуфики\",\r",
											"            \"code\": \"padded_stools\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"эксклюзивная мебель\",\r",
											"            \"code\": \"exclusive_furniture\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"мебельный гарнитур\",\r",
											"            \"code\": \"furniture set\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"стол\",\r",
											"            \"code\": \"table\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"раскладной диван\",\r",
											"            \"code\": \"folding_sofa\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"раскладное кресло\",\r",
											"            \"code\": \"folding_armchair\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"шкаф-купе\",\r",
											"            \"code\": \"sliding_door_wardrobe\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"кресло\",\r",
											"            \"code\": \"armchair\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"тумба\",\r",
											"            \"code\": \"nightstand\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"мягкая мебель\",\r",
											"            \"code\": \"soft_furniture\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"туалетный столик\",\r",
											"            \"code\": \"toilet_table\"\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"\r",
											"const idealElektronik = {\r",
											"    \"name\": \"Elektronik\",\r",
											"    \"amenities\": [\r",
											"        {\r",
											"            \"name\": \"холодильник\",\r",
											"            \"code\": \"refrigerator\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"кондиционер\",\r",
											"            \"code\": \"air_conditioning\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"система климат-контроля\",\r",
											"            \"code\": \"air_conditioning_individually_controlled_in_room\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"настольные лампы\",\r",
											"            \"code\": \"desk_lamps\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"кулер\",\r",
											"            \"code\": \"cooler\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"фен\",\r",
											"            \"code\": \"hairdryer\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"электронные весы\",\r",
											"            \"code\": \"scales\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"будильник\",\r",
											"            \"code\": \"alarm_clock\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"система безопасности\",\r",
											"            \"code\": \"security_system\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"электронные замки\",\r",
											"            \"code\": \"electronic_locks\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"плита для приготовления пищи\",\r",
											"            \"code\": \"stove\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"отопление\",\r",
											"            \"code\": \"heating\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"мини-холодильник\",\r",
											"            \"code\": \"mini_fridge\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"кулер на этаже\",\r",
											"            \"code\": \"cooler_on_the_floor\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"USB\",\r",
											"            \"code\": \"usb\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"система умный дом\",\r",
											"            \"code\": \"smart_house\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"светильник\",\r",
											"            \"code\": \"lamp\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"вентилятор\",\r",
											"            \"code\": \"fan\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"кофемашина\",\r",
											"            \"code\": \"coffee_machine\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"микроволновая печь\",\r",
											"            \"code\": \"microwave\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"утюг\",\r",
											"            \"code\": \"iron\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"радио\",\r",
											"            \"code\": \"radio\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"обогреватель\",\r",
											"            \"code\": \"heater\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"персональный компьютер\",\r",
											"            \"code\": \"pc\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"факс\",\r",
											"            \"code\": \"fax\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"магнитофон\",\r",
											"            \"code\": \"magnitofon\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"сплит-система\",\r",
											"            \"code\": \"split_air_conditioning_system\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"Фанкойл\",\r",
											"            \"code\": \"fan_coil\"\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"\r",
											"const idealEquip =  {\r",
											"    \"name\": \"Оборудование и электроника\",\r",
											"    \"amenities\": [\r",
											"        {\r",
											"            \"name\": \"телефон\",\r",
											"            \"code\": \"phone\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"рабочий стол\",\r",
											"            \"code\": \"work_table\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"мультиварка\",\r",
											"            \"code\": \"multi\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"напольная вешалка\",\r",
											"            \"code\": \"veshalka\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"Кухонная варежка\",\r",
											"            \"code\": \"kitchen_mitten\"\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"\r",
											"const idealBeds =   {\r",
											"    \"name\": \"Кровати\",\r",
											"    \"amenities\": [\r",
											"        {\r",
											"            \"name\": \"три односпальные кровати\",\r",
											"            \"code\": \"three_single_beds\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"кровать «King size»\",\r",
											"            \"code\": \"king_bed\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"две односпальные кровати\",\r",
											"            \"code\": \"two_single_beds\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"гипоаллергенное белье\",\r",
											"            \"code\": \"hypoallergenic_linen\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"ортопедический матрас\",\r",
											"            \"code\": \"orthopedic_mattress\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"двуспальная кровать\",\r",
											"            \"code\": \"double_bed\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"две полутороспальные кровати\",\r",
											"            \"code\": \"two_full_beds\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"односпальная кровать\",\r",
											"            \"code\": \"single_bed\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"две односпальные или большая двуспальная кровать\",\r",
											"            \"code\": \"two_single_or_big_double_bed\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"две кровати \\\"Queen size\\\"\",\r",
											"            \"code\": \"two_queen_size_beds\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"кровать «Queen size»\",\r",
											"            \"code\": \"queen_bed\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"три двуспальные кровати\",\r",
											"            \"code\": \"three_double_beds\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"раскладушка\",\r",
											"            \"code\": \"126\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"три полутороспальные кровати\",\r",
											"            \"code\": \"three_full_beds\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"две двуспальные кровати\",\r",
											"            \"code\": \"two_double_beds\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"полутороспальная кровать\",\r",
											"            \"code\": \"full_bed\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"детская кровать\",\r",
											"            \"code\": \"child_rollaway\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"шесть односпальных кроватей\",\r",
											"            \"code\": \"six_beds\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"две кровати \\\"King size\\\"\",\r",
											"            \"code\": \"two_king_size_beds\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"двухъярусные кровати\",\r",
											"            \"code\": \"bunk_beds\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"кроватка\",\r",
											"            \"code\": \"krovatka\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"пять односпальных кроватей\",\r",
											"            \"code\": \"five_single_beds\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"четыре односпальные кровати\",\r",
											"            \"code\": \"four_beds\"\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"\r",
											"pm.test('\"Кровати\" in response matches reference', function () {\r",
											"    const isEqual = _.isEqual(idealBeds, jsonData[0]);\r",
											"    pm.expect(isEqual).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test('\"Оборудование и электроника\" in response matches reference', function () {\r",
											"    const isEqual = _.isEqual(idealEquip, jsonData[1]);\r",
											"    pm.expect(isEqual).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test('\"Elektronik\" in response matches reference', function () {\r",
											"    const isEqual = _.isEqual(idealElektronik, jsonData[2]);\r",
											"    pm.expect(isEqual).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test('\"Мебель\" in response matches reference', function () {\r",
											"    const isEqual = _.isEqual(idealFurniture, jsonData[3]);\r",
											"    pm.expect(isEqual).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test('\"Internet dan telephone\" in response matches reference', function () {\r",
											"    const isEqual = _.isEqual(idealInternet, jsonData[4]);\r",
											"    pm.expect(isEqual).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test('\"Video dan audio\" in response matches reference', function () {\r",
											"    const isEqual = _.isEqual(idealVideo, jsonData[5]);\r",
											"    pm.expect(isEqual).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test('\"Ванная комната\" in response matches reference', function () {\r",
											"    const isEqual = _.isEqual(idealBath, jsonData[6]);\r",
											"    pm.expect(isEqual).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test('\"Внешняя территория и вид из окон\" in response matches reference', function () {\r",
											"    const isEqual = _.isEqual(idealTerraria, jsonData[7]);\r",
											"    pm.expect(isEqual).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test('\"Прочее\" in response matches reference', function () {\r",
											"    const isEqual = _.isEqual(idealOther, jsonData[8]);\r",
											"    pm.expect(isEqual).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test('\"Видео/аудио\" in response matches reference', function () {\r",
											"    const isEqual = _.isEqual(idealVideoAudio, jsonData[9]);\r",
											"    pm.expect(isEqual).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test('\"Интернет/телефония\" in response matches reference', function () {\r",
											"    const isEqual = _.isEqual(idealInternetPhone, jsonData[10]);\r",
											"    pm.expect(isEqual).to.be.true;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "X-API-KEY",
										"value": "{{ApIKEY}}",
										"type": "default"
									}
								],
								"url": {
									"raw": "https://{{Host}}/api/content/v1/room-amenity-categories",
									"protocol": "https",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"content",
										"v1",
										"room-amenity-categories"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Tests",
			"item": [
				{
					"name": "properties",
					"item": [
						{
							"name": "properties/events test",
							"item": [
								{
									"name": "properties/events (ok)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// ------ Response header param test\r",
													"\r",
													"pm.test(\"Response code is 200\", function () {\r",
													"    pm.response.to.have.status(200); \r",
													"});\r",
													"\r",
													"pm.test(\"Response time < 1000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
													"});\r",
													"\r",
													"pm.test(\"Response code contain string 'OK'\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response headers is valid\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
													"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
													"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
													"    pm.response.to.have.header(\"X-Request-ID\");\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"\r",
													"// ------ Content tests\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"const responseSchema = {\r",
													"  \"title\": \"Generated schema for Root\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"hasMoreData\": {\r",
													"      \"type\": \"boolean\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"hasMoreData\"\r",
													"  ]\r",
													"}\r",
													"\r",
													"pm.test('JSON schema is correct', function() {\r",
													"  pm.response.to.have.jsonSchema(responseSchema);\r",
													"});\r",
													"\r",
													"pm.test(\"Partial data validation in response body\", function () {\r",
													"    pm.expect(jsonData.hasMoreData).to.eql(false);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "X-API-KEY",
												"value": "{{ApIKEY}}"
											}
										],
										"url": {
											"raw": "https://{{Host}}/api/content/v1/properties/events?count=200&timestamp={{timestamp}}",
											"protocol": "https",
											"host": [
												"{{Host}}"
											],
											"path": [
												"api",
												"content",
												"v1",
												"properties",
												"events"
											],
											"query": [
												{
													"key": "count",
													"value": "200"
												},
												{
													"key": "timestamp",
													"value": "{{timestamp}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "properties/events (wrong count)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// ------ Response header param test\r",
													"\r",
													"pm.test(\"Response code is 400\", function () {\r",
													"    pm.response.to.have.status(400); \r",
													"});\r",
													"\r",
													"pm.test(\"Response time < 1000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
													"});\r",
													"\r",
													"pm.test(\"Response code contain string 'Bad Request'\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response headers is valid\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
													"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
													"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
													"    pm.response.to.have.header(\"X-Request-ID\");\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"\r",
													"// ------ Content tests\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"const responseSchema = {\r",
													"  \"title\": \"Generated schema for Root\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"errors\": {\r",
													"      \"type\": \"array\",\r",
													"      \"items\": {\r",
													"        \"type\": \"object\",\r",
													"        \"properties\": {\r",
													"          \"code\": {\r",
													"            \"type\": \"string\"\r",
													"          },\r",
													"          \"message\": {\r",
													"            \"type\": \"string\"\r",
													"          }\r",
													"        },\r",
													"        \"required\": [\r",
													"          \"code\",\r",
													"          \"message\"\r",
													"        ]\r",
													"      }\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"errors\"\r",
													"  ]\r",
													"}\r",
													"\r",
													"pm.test('JSON schema is correct', function() {\r",
													"  pm.response.to.have.jsonSchema(responseSchema);\r",
													"});\r",
													"\r",
													"pm.test(\"Partial data validation in response body\", function () {\r",
													"    pm.expect(jsonData.errors[0].code).to.eql(\"IncorrectRequest\");\r",
													"    pm.expect(jsonData.errors[0].message).to.include(\"The value\");\r",
													"    pm.expect(jsonData.errors[0].message).to.include(\"is not valid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "X-API-KEY",
												"value": "{{ApIKEY}}"
											}
										],
										"url": {
											"raw": "https://{{Host}}/api/content/v1/properties/events?count=-100000000000&timestamp={{timestamp}}",
											"protocol": "https",
											"host": [
												"{{Host}}"
											],
											"path": [
												"api",
												"content",
												"v1",
												"properties",
												"events"
											],
											"query": [
												{
													"key": "count",
													"value": "-100000000000"
												},
												{
													"key": "timestamp",
													"value": "{{timestamp}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "properties/events (unauthorized)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// ------ Response header param test\r",
													"\r",
													"pm.test(\"Response code is 401\", function () {\r",
													"    pm.response.to.have.status(401); \r",
													"});\r",
													"\r",
													"pm.test(\"Response time < 1000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
													"});\r",
													"\r",
													"pm.test(\"Response code contain string 'Unauthorizedt'\", function () {\r",
													"    pm.response.to.have.status(\"Unauthorized\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response headers is valid\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
													"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
													"    pm.response.to.have.header(\"X-Request-ID\");\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"\r",
													"// ------ Content tests\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"const responseSchema = {\r",
													"  \"title\": \"Generated schema for Root\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"message\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"message\"\r",
													"  ]\r",
													"}\r",
													"\r",
													"pm.test('JSON schema is correct', function() {\r",
													"  pm.response.to.have.jsonSchema(responseSchema);\r",
													"});\r",
													"\r",
													"pm.test(\"Partial data validation in response body\", function () {\r",
													"    pm.expect(jsonData.message).to.include(\"Unauthorized\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "X-API-KEY",
												"value": "BAD_BOY"
											}
										],
										"url": {
											"raw": "https://{{Host}}/api/content/v1/properties/events?count=200&timestamp={{timestamp}}",
											"protocol": "https",
											"host": [
												"{{Host}}"
											],
											"path": [
												"api",
												"content",
												"v1",
												"properties",
												"events"
											],
											"query": [
												{
													"key": "count",
													"value": "200"
												},
												{
													"key": "timestamp",
													"value": "{{timestamp}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "properties/events (wrong timestamp)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// ------ Response header param test\r",
													"\r",
													"pm.test(\"Response code is 400\", function () {\r",
													"    pm.response.to.have.status(400); \r",
													"});\r",
													"\r",
													"pm.test(\"Response time < 1000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
													"});\r",
													"\r",
													"pm.test(\"Response code contain string 'Bad Request'\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response headers is valid\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
													"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
													"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
													"    pm.response.to.have.header(\"X-Request-ID\");\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"\r",
													"// ------ Content tests\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"const responseSchema = {\r",
													"  \"title\": \"Generated schema for Root\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"errors\": {\r",
													"      \"type\": \"array\",\r",
													"      \"items\": {\r",
													"        \"type\": \"object\",\r",
													"        \"properties\": {\r",
													"          \"code\": {\r",
													"            \"type\": \"string\"\r",
													"          },\r",
													"          \"message\": {\r",
													"            \"type\": \"string\"\r",
													"          }\r",
													"        },\r",
													"        \"required\": [\r",
													"          \"code\",\r",
													"          \"message\"\r",
													"        ]\r",
													"      }\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"errors\"\r",
													"  ]\r",
													"}\r",
													"\r",
													"pm.test('JSON schema is correct', function() {\r",
													"  pm.response.to.have.jsonSchema(responseSchema);\r",
													"});\r",
													"\r",
													"pm.test(\"Partial data validation in response body\", function () {\r",
													"    pm.expect(jsonData.errors[0].code).to.eql(\"IncorrectRequest\");\r",
													"    pm.expect(jsonData.errors[0].message).to.eql(\"The value '-1000-06-20T10:41:04Z' is not valid.\"); // пока оставил точное вхождение\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "X-API-KEY",
												"value": "{{ApIKEY}}"
											}
										],
										"url": {
											"raw": "https://{{Host}}/api/content/v1/properties/events?count=200&timestamp=-1000-06-20T10%3A41%3A04Z",
											"protocol": "https",
											"host": [
												"{{Host}}"
											],
											"path": [
												"api",
												"content",
												"v1",
												"properties",
												"events"
											],
											"query": [
												{
													"key": "count",
													"value": "200"
												},
												{
													"key": "timestamp",
													"value": "-1000-06-20T10%3A41%3A04Z"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "properties",
							"item": [
								{
									"name": "properties (all) (ok)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// ------ Response header param test\r",
													"\r",
													"pm.test(\"Response code is 200\", function () {\r",
													"    pm.response.to.have.status(200); \r",
													"});\r",
													"\r",
													"pm.test(\"Response time < 1000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
													"});\r",
													"\r",
													"pm.test(\"Response code contain string 'OK'\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response headers is valid\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
													"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
													"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
													"    pm.response.to.have.header(\"X-Request-ID\");\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"\r",
													"// ------ Content tests\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Partial data validation in response body\", function () {\r",
													"    pm.expect(jsonData.properties[0].id).to.eql(\"5019\");\r",
													"    pm.expect(jsonData.properties[0].name).to.eql(\"TravelLine TEST_channel manager\");\r",
													"    pm.expect(jsonData.properties[0].description).to.eql(\"Уютные апартаменты в центре города.\");\r",
													"    pm.expect(jsonData.properties[0].images).to.be;\r",
													"    pm.expect(jsonData.properties[0].images[0].url).to.include(\"https://\");\r",
													"    pm.expect(jsonData.properties[0].stayUnitKind).to.eql(\"NightRate\");\r",
													"\r",
													"    pm.expect(jsonData.properties[0].contactInfo).to.be;\r",
													"    pm.expect(jsonData.properties[0].contactInfo.address).to.be;\r",
													"    pm.expect(jsonData.properties[0].contactInfo.address.postalCode).to.eql(\"424038\");\r",
													"    pm.expect(jsonData.properties[0].contactInfo.address.countryCode).to.eql(\"RUS\");\r",
													"    pm.expect(jsonData.properties[0].contactInfo.address.region).to.eql(\"Республика Марий Эл\");\r",
													"    pm.expect(jsonData.properties[0].contactInfo.address.regionId).to.eql(\"44\");\r",
													"    pm.expect(jsonData.properties[0].contactInfo.address.cityName).to.eql(\"Йошкар-Ола\");\r",
													"    pm.expect(jsonData.properties[0].contactInfo.address.cityId).to.eql(\"1\");\r",
													"    pm.expect(jsonData.properties[0].contactInfo.address.addressLine).to.eql(\"Республика Марий Эл, г. Йошкар-Ола, ул. Чавайнf, д. 15\");\r",
													"    pm.expect(jsonData.properties[0].contactInfo.address.latitude).to.eql(53.243325);\r",
													"    pm.expect(jsonData.properties[0].contactInfo.address.longitude).to.eql(34.363731);\r",
													"\r",
													"    pm.expect(jsonData.properties[0].contactInfo.phones).to.be;\r",
													"    pm.expect(jsonData.properties[0].contactInfo.phones[0].phoneNumber).to.eql(\"8 (947) 784-42-32\");\r",
													"    pm.expect(jsonData.properties[0].contactInfo.phones[0].techType).to.eql(\"Fax\");\r",
													"    pm.expect(jsonData.properties[0].contactInfo.phones[0].remark).to.be;\r",
													"\r",
													"    pm.expect(jsonData.properties[0].contactInfo.emails).to.be;\r",
													"    pm.expect(jsonData.properties[0].contactInfo.emails[0]).to.include(\"test@test.ru\");\r",
													"\r",
													"    pm.expect(jsonData.properties[0].policy).to.be;\r",
													"    pm.expect(jsonData.properties[0].policy.checkInTime).to.include(\"14:00\");\r",
													"    pm.expect(jsonData.properties[0].policy.checkOutTime).to.include(\"12:00\");\r",
													"\r",
													"    pm.expect(jsonData.properties[0].ratePlans[0]).to.be;\r",
													"    pm.expect(jsonData.properties[0].ratePlans[0].id).to.eql(\"229032\");\r",
													"    pm.expect(jsonData.properties[0].ratePlans[0].name).to.eql(\"Лучшая цена дня\");\r",
													"    pm.expect(jsonData.properties[0].ratePlans[0].description).to.eql(\"Самый выгодный тариф для бронирования на официальном сайте.\");\r",
													"    pm.expect(jsonData.properties[0].ratePlans[0].currency).to.eql(\"RUB\");\r",
													"\r",
													"    pm.expect(jsonData.properties[0].roomTypes[0]).to.be;\r",
													"    pm.expect(jsonData.properties[0].roomTypes[0].id).to.eql(\"306757\");\r",
													"    pm.expect(jsonData.properties[0].roomTypes[0].name).to.eql(\"Квартира на Советской\");\r",
													"    pm.expect(jsonData.properties[0].roomTypes[0].description).to.eql(\"Уютная 2х комнтатная квартира.\");\r",
													"    pm.expect(jsonData.properties[0].roomTypes[0].amenities[0].code).to.eql(\"wifi_internet\");\r",
													"    pm.expect(jsonData.properties[0].roomTypes[0].amenities[0].name).to.eql(\"Wi-Fi-интернет\");\r",
													"    pm.expect(jsonData.properties[0].roomTypes[0].images[0].url).to.include(\"https://\");\r",
													"\r",
													"    pm.expect(jsonData.properties[0].roomTypes[0].size.value).to.eql(20);\r",
													"    pm.expect(jsonData.properties[0].roomTypes[0].size.unit).to.eql(\"SquareMetre\");\r",
													"\r",
													"    pm.expect(jsonData.properties[0].roomTypes[0].categoryCode).to.eql(\"Flat\");\r",
													"    pm.expect(jsonData.properties[0].roomTypes[0].categoryName).to.eql(\"Квартира\");\r",
													"\r",
													"    pm.expect(jsonData.properties[0].roomTypes[0].address.postalCode).to.eql(\"424000\");\r",
													"    pm.expect(jsonData.properties[0].roomTypes[0].address.countryCode).to.eql(\"RUS\");\r",
													"    pm.expect(jsonData.properties[0].roomTypes[0].address.regionId).to.eql(\"44\");\r",
													"    pm.expect(jsonData.properties[0].roomTypes[0].address.cityName).to.eql(\"Йошкар-Ола\");\r",
													"    pm.expect(jsonData.properties[0].roomTypes[0].address.cityId).to.eql(\"1\");\r",
													"    pm.expect(jsonData.properties[0].roomTypes[0].address.addressLine).to.eql(\"ул. Советская, д. 142\");\r",
													"    pm.expect(jsonData.properties[0].roomTypes[0].address.latitude).to.eql(56.63206);\r",
													"    pm.expect(jsonData.properties[0].roomTypes[0].address.longitude).to.eql(47.894865);\r",
													"\r",
													"    pm.expect(jsonData.properties[0].roomTypes[0].occupancy.adultBed).to.eql(2);\r",
													"    pm.expect(jsonData.properties[0].roomTypes[0].occupancy.extraBed).to.eql(1);\r",
													"    pm.expect(jsonData.properties[0].roomTypes[0].occupancy.childWithoutBed).to.eql(1);\r",
													"\r",
													"    pm.expect(jsonData.properties[0].roomTypes[0].position).to.eql(0);\r",
													"\r",
													"});\r",
													"\r",
													"const lightResponseSchema = {\r",
													"  \"title\": \"Generated schema for Root\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"properties\": {\r",
													"      \"type\": \"array\",\r",
													"      \"items\": {\r",
													"        \"type\": \"object\",\r",
													"        \"properties\": {\r",
													"          \"id\": {\r",
													"            \"type\": \"string\"\r",
													"          }\r",
													"        },\r",
													"        \"required\": [\r",
													"          \"id\"\r",
													"        ]\r",
													"      }\r",
													"    },\r",
													"    \"warnings\": {\r",
													"      \"type\": \"array\",\r",
													"      \"items\": {}\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"properties\",\r",
													"    \"warnings\"\r",
													"  ]\r",
													"}\r",
													"\r",
													"pm.test('Light JSON schema is correct', function() {\r",
													"  pm.response.to.have.jsonSchema(lightResponseSchema);\r",
													"});\r",
													"\r",
													"const responseSchema = {\r",
													"  \"title\": \"Generated schema for Root\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"properties\": {\r",
													"      \"type\": \"array\",\r",
													"      \"items\": {\r",
													"        \"type\": \"object\",\r",
													"        \"properties\": {\r",
													"          \"id\": {\r",
													"            \"type\": \"string\"\r",
													"          },\r",
													"          \"name\": {\r",
													"            \"type\": \"string\"\r",
													"          },\r",
													"          \"description\": {\r",
													"            \"type\": \"string\"\r",
													"          },\r",
													"          \"images\": {\r",
													"            \"type\": \"array\",\r",
													"            \"items\": {\r",
													"              \"type\": \"object\",\r",
													"              \"properties\": {\r",
													"                \"url\": {\r",
													"                  \"type\": \"string\"\r",
													"                }\r",
													"              },\r",
													"              \"required\": [\r",
													"                \"url\"\r",
													"              ]\r",
													"            }\r",
													"          },\r",
													"          \"stayUnitKind\": {\r",
													"            \"type\": \"string\"\r",
													"          },\r",
													"          \"contactInfo\": {\r",
													"            \"type\": \"object\",\r",
													"            \"properties\": {\r",
													"              \"address\": {\r",
													"                \"type\": \"object\",\r",
													"                \"properties\": {\r",
													"                  \"postalCode\": {\r",
													"                    \"type\": \"string\"\r",
													"                  },\r",
													"                  \"countryCode\": {\r",
													"                    \"type\": \"string\"\r",
													"                  },\r",
													"                  \"region\": {\r",
													"                    \"type\": \"string\"\r",
													"                  },\r",
													"                  \"regionId\": {\r",
													"                    \"type\": \"string\"\r",
													"                  },\r",
													"                  \"cityName\": {\r",
													"                    \"type\": \"string\"\r",
													"                  },\r",
													"                  \"cityId\": {\r",
													"                    \"type\": \"string\"\r",
													"                  },\r",
													"                  \"addressLine\": {\r",
													"                    \"type\": \"string\"\r",
													"                  },\r",
													"                  \"latitude\": {\r",
													"                    \"type\": \"number\"\r",
													"                  },\r",
													"                  \"longitude\": {\r",
													"                    \"type\": \"number\"\r",
													"                  }\r",
													"                },\r",
													"                \"required\": [\r",
													"                  \"postalCode\",\r",
													"                  \"countryCode\",\r",
													"                  \"region\",\r",
													"                  \"regionId\",\r",
													"                  \"cityName\",\r",
													"                  \"cityId\",\r",
													"                  \"addressLine\"\r",
													"                ]\r",
													"              },\r",
													"              \"phones\": {\r",
													"                \"type\": \"array\",\r",
													"                \"items\": {\r",
													"                  \"type\": \"object\",\r",
													"                  \"properties\": {\r",
													"                    \"phoneNumber\": {\r",
													"                      \"type\": \"string\"\r",
													"                    },\r",
													"                    \"techType\": {\r",
													"                      \"type\": \"string\"\r",
													"                    },\r",
													"                    \"remark\": {\r",
													"                      \"type\": \"string\"\r",
													"                    }\r",
													"                  },\r",
													"                  \"required\": [\r",
													"                    \"phoneNumber\",\r",
													"                    \"techType\",\r",
													"                    \"remark\"\r",
													"                  ]\r",
													"                }\r",
													"              },\r",
													"              \"emails\": {\r",
													"                \"type\": \"array\",\r",
													"                \"items\": {\r",
													"                  \"type\": \"string\"\r",
													"                }\r",
													"              }\r",
													"            },\r",
													"            \"required\": [\r",
													"              \"address\",\r",
													"              \"phones\",\r",
													"              \"emails\"\r",
													"            ]\r",
													"          },\r",
													"          \"policy\": {\r",
													"            \"type\": \"object\",\r",
													"            \"properties\": {\r",
													"              \"checkInTime\": {\r",
													"                \"type\": \"string\"\r",
													"              },\r",
													"              \"checkOutTime\": {\r",
													"                \"type\": \"string\"\r",
													"              }\r",
													"            },\r",
													"            \"required\": [\r",
													"              \"checkInTime\",\r",
													"              \"checkOutTime\"\r",
													"            ]\r",
													"          },\r",
													"          \"ratePlans\": {\r",
													"            \"type\": \"array\",\r",
													"            \"items\": {\r",
													"              \"type\": \"object\",\r",
													"              \"properties\": {\r",
													"                \"id\": {\r",
													"                  \"type\": \"string\"\r",
													"                },\r",
													"                \"name\": {\r",
													"                  \"type\": \"string\"\r",
													"                },\r",
													"                \"description\": {\r",
													"                  \"type\": \"string\"\r",
													"                },\r",
													"                \"currency\": {\r",
													"                  \"type\": \"string\"\r",
													"                }\r",
													"              },\r",
													"              \"required\": [\r",
													"                \"id\",\r",
													"                \"name\",\r",
													"                \"description\",\r",
													"                \"currency\"\r",
													"              ]\r",
													"            }\r",
													"          },\r",
													"          \"roomTypes\": {\r",
													"            \"type\": \"array\",\r",
													"            \"items\": {\r",
													"              \"type\": \"object\",\r",
													"              \"properties\": {\r",
													"                \"id\": {\r",
													"                  \"type\": \"string\"\r",
													"                },\r",
													"                \"name\": {\r",
													"                  \"type\": \"string\"\r",
													"                },\r",
													"                \"description\": {\r",
													"                  \"type\": \"string\"\r",
													"                },\r",
													"                \"amenities\": {\r",
													"                  \"type\": \"array\",\r",
													"                  \"items\": {\r",
													"                    \"type\": \"object\",\r",
													"                    \"properties\": {\r",
													"                      \"code\": {\r",
													"                        \"type\": \"string\"\r",
													"                      },\r",
													"                      \"name\": {\r",
													"                        \"type\": \"string\"\r",
													"                      }\r",
													"                    },\r",
													"                    \"required\": [\r",
													"                      \"code\",\r",
													"                      \"name\"\r",
													"                    ]\r",
													"                  }\r",
													"                },\r",
													"                \"images\": {\r",
													"                  \"type\": \"array\",\r",
													"                  \"items\": {\r",
													"                    \"type\": \"object\",\r",
													"                    \"properties\": {\r",
													"                      \"url\": {\r",
													"                        \"type\": \"string\"\r",
													"                      }\r",
													"                    },\r",
													"                    \"required\": [\r",
													"                      \"url\"\r",
													"                    ]\r",
													"                  }\r",
													"                },\r",
													"                \"size\": {\r",
													"                  \"type\": \"object\",\r",
													"                  \"properties\": {\r",
													"                    \"value\": {\r",
													"                      \"type\": \"number\"\r",
													"                    },\r",
													"                    \"unit\": {\r",
													"                      \"type\": \"string\"\r",
													"                    }\r",
													"                  },\r",
													"                  \"required\": [\r",
													"                    \"value\",\r",
													"                    \"unit\"\r",
													"                  ]\r",
													"                },\r",
													"                \"categoryCode\": {\r",
													"                  \"type\": \"string\"\r",
													"                },\r",
													"                \"categoryName\": {\r",
													"                  \"type\": \"string\"\r",
													"                },\r",
													"                \"address\": {\r",
													"                  \"type\": \"object\",\r",
													"                  \"properties\": {\r",
													"                    \"postalCode\": {\r",
													"                      \"type\": \"string\"\r",
													"                    },\r",
													"                    \"countryCode\": {\r",
													"                      \"type\": \"string\"\r",
													"                    },\r",
													"                    \"regionId\": {\r",
													"                      \"type\": \"string\"\r",
													"                    },\r",
													"                    \"cityName\": {\r",
													"                      \"type\": \"string\"\r",
													"                    },\r",
													"                    \"cityId\": {\r",
													"                      \"type\": \"string\"\r",
													"                    },\r",
													"                    \"addressLine\": {\r",
													"                      \"type\": \"string\"\r",
													"                    },\r",
													"                    \"latitude\": {\r",
													"                      \"type\": \"number\"\r",
													"                    },\r",
													"                    \"longitude\": {\r",
													"                      \"type\": \"number\"\r",
													"                    }\r",
													"                  },\r",
													"                  \"required\": [\r",
													"                    \"postalCode\",\r",
													"                    \"countryCode\",\r",
													"                    \"regionId\",\r",
													"                    \"cityName\",\r",
													"                    \"cityId\",\r",
													"                    \"addressLine\"\r",
													"                  ]\r",
													"                },\r",
													"                \"occupancy\": {\r",
													"                  \"type\": \"object\",\r",
													"                  \"properties\": {\r",
													"                    \"adultBed\": {\r",
													"                      \"type\": \"number\"\r",
													"                    },\r",
													"                    \"extraBed\": {\r",
													"                      \"type\": \"number\"\r",
													"                    },\r",
													"                    \"childWithoutBed\": {\r",
													"                      \"type\": \"number\"\r",
													"                    }\r",
													"                  },\r",
													"                  \"required\": [\r",
													"                    \"adultBed\",\r",
													"                    \"extraBed\",\r",
													"                    \"childWithoutBed\"\r",
													"                  ]\r",
													"                },\r",
													"                \"position\": {\r",
													"                  \"type\": \"number\"\r",
													"                }\r",
													"              },\r",
													"              \"required\": [\r",
													"                \"id\",\r",
													"                \"name\",\r",
													"                \"description\",\r",
													"                \"amenities\",\r",
													"                \"images\",\r",
													"                \"size\",\r",
													"                \"categoryCode\",\r",
													"                \"categoryName\",\r",
													"                \"occupancy\",\r",
													"                \"position\"\r",
													"              ]\r",
													"            }\r",
													"          },\r",
													"          \"services\": {\r",
													"            \"type\": \"array\",\r",
													"            \"items\": {\r",
													"              \"type\": \"object\",\r",
													"              \"properties\": {\r",
													"                \"id\": {\r",
													"                  \"type\": \"string\"\r",
													"                },\r",
													"                \"name\": {\r",
													"                  \"type\": \"string\"\r",
													"                },\r",
													"                \"description\": {\r",
													"                  \"type\": \"string\"\r",
													"                },\r",
													"                \"kind\": {\r",
													"                  \"type\": \"string\"\r",
													"                },\r",
													"                \"mealPlanCode\": {\r",
													"                  \"type\": \"string\"\r",
													"                },\r",
													"                \"mealPlanName\": {\r",
													"                  \"type\": \"string\"\r",
													"                }\r",
													"              },\r",
													"              \"required\": [\r",
													"                \"id\",\r",
													"                \"name\",\r",
													"                \"description\",\r",
													"                \"kind\"\r",
													"              ]\r",
													"            }\r",
													"          },\r",
													"          \"stars\": {\r",
													"            \"type\": \"number\"\r",
													"          }\r",
													"        },\r",
													"        \"required\": [\r",
													"          \"id\",\r",
													"          \"name\",\r",
													"          \"description\",\r",
													"          \"images\",\r",
													"          \"stayUnitKind\",\r",
													"          \"contactInfo\",\r",
													"          \"policy\",\r",
													"          \"ratePlans\",\r",
													"          \"roomTypes\",\r",
													"          \"services\"\r",
													"        ]\r",
													"      }\r",
													"    },\r",
													"    \"warnings\": {\r",
													"      \"type\": \"array\",\r",
													"      \"items\": {}\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"properties\",\r",
													"    \"warnings\"\r",
													"  ]\r",
													"}\r",
													"\r",
													"pm.test(' Heavy JSON schema is correct', function() {\r",
													"  pm.response.to.have.jsonSchema(responseSchema);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "X-API-KEY",
												"value": "47306034-78fc-4767-bfd9-25e78825b985"
											}
										],
										"url": {
											"raw": "https://{{Host}}/api/content/v1/properties?since=UlUtNDE5NQ%3D%3D&count=200&include=All",
											"protocol": "https",
											"host": [
												"{{Host}}"
											],
											"path": [
												"api",
												"content",
												"v1",
												"properties"
											],
											"query": [
												{
													"key": "since",
													"value": "UlUtNDE5NQ%3D%3D"
												},
												{
													"key": "count",
													"value": "200"
												},
												{
													"key": "include",
													"value": "All"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "properties (all) (unauthorized)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// ------ Response header param test\r",
													"\r",
													"pm.test(\"Response code is 401\", function () {\r",
													"    pm.response.to.have.status(401); \r",
													"});\r",
													"\r",
													"pm.test(\"Response time < 1000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
													"});\r",
													"\r",
													"pm.test(\"Response code contain string 'Unauthorizedt'\", function () {\r",
													"    pm.response.to.have.status(\"Unauthorized\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response headers is valid\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
													"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
													"    pm.response.to.have.header(\"X-Request-ID\");\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"\r",
													"// ------ Content tests\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"const responseSchema = {\r",
													"  \"title\": \"Generated schema for Root\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"message\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"message\"\r",
													"  ]\r",
													"}\r",
													"\r",
													"pm.test('JSON schema is correct', function() {\r",
													"  pm.response.to.have.jsonSchema(responseSchema);\r",
													"});\r",
													"\r",
													"pm.test(\"Partial data validation in response body\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Unauthorized\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "X-API-KEY",
												"value": "BAD_BOY"
											}
										],
										"url": {
											"raw": "https://{{Host}}/api/content/v1/properties?since=UlUtNDE5NQ%3D%3D&count=200&include=All",
											"protocol": "https",
											"host": [
												"{{Host}}"
											],
											"path": [
												"api",
												"content",
												"v1",
												"properties"
											],
											"query": [
												{
													"key": "since",
													"value": "UlUtNDE5NQ%3D%3D"
												},
												{
													"key": "count",
													"value": "200"
												},
												{
													"key": "include",
													"value": "All"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "properties (all) (wrong count)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// ------ Response header param test\r",
													"\r",
													"pm.test(\"Response code is 400\", function () {\r",
													"    pm.response.to.have.status(400); \r",
													"});\r",
													"\r",
													"pm.test(\"Response time < 1000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
													"});\r",
													"\r",
													"pm.test(\"Response code contain string 'Bad Request'\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response headers is valid\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
													"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
													"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
													"    pm.response.to.have.header(\"X-Request-ID\");\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"// ------ Content tests\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"const responseSchema = {\r",
													"  \"title\": \"Generated schema for Root\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"errors\": {\r",
													"      \"type\": \"array\",\r",
													"      \"items\": {\r",
													"        \"type\": \"object\",\r",
													"        \"properties\": {\r",
													"          \"code\": {\r",
													"            \"type\": \"string\"\r",
													"          },\r",
													"          \"message\": {\r",
													"            \"type\": \"string\"\r",
													"          }\r",
													"        },\r",
													"        \"required\": [\r",
													"          \"code\",\r",
													"          \"message\"\r",
													"        ]\r",
													"      }\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"errors\"\r",
													"  ]\r",
													"}\r",
													"\r",
													"pm.test('JSON schema is correct', function() {\r",
													"  pm.response.to.have.jsonSchema(responseSchema);\r",
													"});\r",
													"\r",
													"pm.test(\"Partial data validation in response body\", function () {\r",
													"    pm.expect(jsonData.errors[0].code).to.eql(\"IncorrectRequest\");\r",
													"    pm.expect(jsonData.errors[0].message).to.eql(\"The value '-100000000000' is not valid.\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "X-API-KEY",
												"value": "{{ApIKEY}}"
											}
										],
										"url": {
											"raw": "https://{{Host}}/api/content/v1/properties?since=UlUtNDE5NQ%3D%3D&count=-100000000000&include=All",
											"protocol": "https",
											"host": [
												"{{Host}}"
											],
											"path": [
												"api",
												"content",
												"v1",
												"properties"
											],
											"query": [
												{
													"key": "since",
													"value": "UlUtNDE5NQ%3D%3D"
												},
												{
													"key": "count",
													"value": "-100000000000"
												},
												{
													"key": "include",
													"value": "All"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "properties (all) (wrong count) (2)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// ------ Response header param test\r",
													"\r",
													"pm.test(\"Response code is 400\", function () {\r",
													"    pm.response.to.have.status(400); \r",
													"});\r",
													"\r",
													"pm.test(\"Response time < 1000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
													"});\r",
													"\r",
													"pm.test(\"Response code contain string 'Bad Request'\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response headers is valid\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
													"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
													"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
													"    pm.response.to.have.header(\"X-Request-ID\");\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"// ------ Content tests\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"const responseSchema = {\r",
													"  \"title\": \"Generated schema for Root\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"errors\": {\r",
													"      \"type\": \"array\",\r",
													"      \"items\": {\r",
													"        \"type\": \"object\",\r",
													"        \"properties\": {\r",
													"          \"code\": {\r",
													"            \"type\": \"string\"\r",
													"          },\r",
													"          \"message\": {\r",
													"            \"type\": \"string\"\r",
													"          }\r",
													"        },\r",
													"        \"required\": [\r",
													"          \"code\",\r",
													"          \"message\"\r",
													"        ]\r",
													"      }\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"errors\"\r",
													"  ]\r",
													"}\r",
													"\r",
													"pm.test('JSON schema is correct', function() {\r",
													"  pm.response.to.have.jsonSchema(responseSchema);\r",
													"});\r",
													"\r",
													"pm.test(\"Partial data validation in response body\", function () {\r",
													"    pm.expect(jsonData.errors[0].code).to.eql(\"IncorrectRequest\");\r",
													"    pm.expect(jsonData.errors[0].message).to.eql(\"The value 'null' is not valid.\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "X-API-KEY",
												"value": "{{ApIKEY}}"
											}
										],
										"url": {
											"raw": "https://{{Host}}/api/content/v1/properties?since=UlUtNDE5NQ%3D%3D&count=null&include=All",
											"protocol": "https",
											"host": [
												"{{Host}}"
											],
											"path": [
												"api",
												"content",
												"v1",
												"properties"
											],
											"query": [
												{
													"key": "since",
													"value": "UlUtNDE5NQ%3D%3D"
												},
												{
													"key": "count",
													"value": "null"
												},
												{
													"key": "include",
													"value": "All"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "properties (all) (invalid since)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// ------ Response header param test\r",
													"\r",
													"pm.test(\"Response code is 400\", function () {\r",
													"    pm.response.to.have.status(400); \r",
													"});\r",
													"\r",
													"pm.test(\"Response time < 1000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
													"});\r",
													"\r",
													"pm.test(\"Response code contain string 'Bad Request'\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response headers is valid\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
													"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
													"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
													"    pm.response.to.have.header(\"X-Request-ID\");\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"// ------ Content tests\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"const responseSchema = {\r",
													"  \"title\": \"Generated schema for Root\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"errors\": {\r",
													"      \"type\": \"array\",\r",
													"      \"items\": {\r",
													"        \"type\": \"object\",\r",
													"        \"properties\": {\r",
													"          \"code\": {\r",
													"            \"type\": \"string\"\r",
													"          },\r",
													"          \"message\": {\r",
													"            \"type\": \"string\"\r",
													"          }\r",
													"        },\r",
													"        \"required\": [\r",
													"          \"code\",\r",
													"          \"message\"\r",
													"        ]\r",
													"      }\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"errors\"\r",
													"  ]\r",
													"}\r",
													"\r",
													"pm.test('JSON schema is correct', function() {\r",
													"  pm.response.to.have.jsonSchema(responseSchema);\r",
													"});\r",
													"\r",
													"pm.test(\"Partial data validation in response body\", function () {\r",
													"    pm.expect(jsonData.errors[0].code).to.eql(\"IncorrectRequest\");\r",
													"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid since 1\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "X-API-KEY",
												"value": "{{ApIKEY}}"
											}
										],
										"url": {
											"raw": "https://{{Host}}/api/content/v1/properties?since=1&count=200&include=All",
											"protocol": "https",
											"host": [
												"{{Host}}"
											],
											"path": [
												"api",
												"content",
												"v1",
												"properties"
											],
											"query": [
												{
													"key": "since",
													"value": "1"
												},
												{
													"key": "count",
													"value": "200"
												},
												{
													"key": "include",
													"value": "All"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "properties (id only) (ok)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// ------ Response header param test\r",
													"\r",
													"pm.test(\"Response code is 200\", function () {\r",
													"    pm.response.to.have.status(200); \r",
													"});\r",
													"\r",
													"pm.test(\"Response time < 1000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
													"});\r",
													"\r",
													"pm.test(\"Response code contain string 'OK'\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response headers is valid\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
													"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
													"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
													"    pm.response.to.have.header(\"X-Request-ID\");\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"\r",
													"// ------ Content tests\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"const responseSchema = {\r",
													"  \"title\": \"Generated schema for Root\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"properties\": {\r",
													"      \"type\": \"array\",\r",
													"      \"items\": {\r",
													"        \"type\": \"object\",\r",
													"        \"properties\": {\r",
													"          \"id\": {\r",
													"            \"type\": \"string\"\r",
													"          }\r",
													"        },\r",
													"        \"required\": [\r",
													"          \"id\"\r",
													"        ]\r",
													"      }\r",
													"    },\r",
													"    \"warnings\": {\r",
													"      \"type\": \"array\",\r",
													"      \"items\": {}\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"properties\",\r",
													"    \"warnings\"\r",
													"  ]\r",
													"}\r",
													"\r",
													"pm.test('JSON schema is correct', function() {\r",
													"  pm.response.to.have.jsonSchema(responseSchema);\r",
													"});\r",
													"\r",
													"pm.test(\"Partial data validation in response body\", function () {\r",
													"    pm.expect(jsonData.properties[0].id).to.eql(\"5019\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "X-API-KEY",
												"value": "{{ApIKEY}}"
											}
										],
										"url": {
											"raw": "https://{{Host}}/api/content/v1/properties?since=UlUtNDE5NQ%3D%3D&count=200",
											"protocol": "https",
											"host": [
												"{{Host}}"
											],
											"path": [
												"api",
												"content",
												"v1",
												"properties"
											],
											"query": [
												{
													"key": "since",
													"value": "UlUtNDE5NQ%3D%3D"
												},
												{
													"key": "count",
													"value": "200"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "properties (id only) (no param) (ok)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// ------ Response header param test\r",
													"\r",
													"pm.test(\"Response code is 200\", function () {\r",
													"    pm.response.to.have.status(200); \r",
													"});\r",
													"\r",
													"pm.test(\"Response time < 1000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
													"});\r",
													"\r",
													"pm.test(\"Response code contain string 'OK'\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response headers is valid\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
													"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
													"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
													"    pm.response.to.have.header(\"X-Request-ID\");\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"\r",
													"// ------ Content tests\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"const responseSchema = {\r",
													"  \"title\": \"Generated schema for Root\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"properties\": {\r",
													"      \"type\": \"array\",\r",
													"      \"items\": {\r",
													"        \"type\": \"object\",\r",
													"        \"properties\": {\r",
													"          \"id\": {\r",
													"            \"type\": \"string\"\r",
													"          }\r",
													"        },\r",
													"        \"required\": [\r",
													"          \"id\"\r",
													"        ]\r",
													"      }\r",
													"    },\r",
													"    \"warnings\": {\r",
													"      \"type\": \"array\",\r",
													"      \"items\": {}\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"properties\",\r",
													"    \"warnings\"\r",
													"  ]\r",
													"}\r",
													"\r",
													"pm.test('JSON schema is correct', function() {\r",
													"  pm.response.to.have.jsonSchema(responseSchema);\r",
													"});\r",
													"\r",
													"pm.test(\"Partial data validation in response body\", function () {\r",
													"    pm.expect(jsonData.properties[0].id).to.eql(\"5019\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "X-API-KEY",
												"value": "{{ApIKEY}}"
											}
										],
										"url": {
											"raw": "https://{{Host}}/api/content/v1/properties",
											"protocol": "https",
											"host": [
												"{{Host}}"
											],
											"path": [
												"api",
												"content",
												"v1",
												"properties"
											]
										}
									},
									"response": []
								},
								{
									"name": "properties (id only) (wrong count)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// ------ Response header param test\r",
													"\r",
													"pm.test(\"Response code is 400\", function () {\r",
													"    pm.response.to.have.status(400); \r",
													"});\r",
													"\r",
													"pm.test(\"Response time < 1000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
													"});\r",
													"\r",
													"pm.test(\"Response code contain string 'Bad Request'\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response headers is valid\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
													"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
													"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
													"    pm.response.to.have.header(\"X-Request-ID\");\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"// ------ Content tests\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"const responseSchema = {\r",
													"  \"title\": \"Generated schema for Root\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"errors\": {\r",
													"      \"type\": \"array\",\r",
													"      \"items\": {\r",
													"        \"type\": \"object\",\r",
													"        \"properties\": {\r",
													"          \"code\": {\r",
													"            \"type\": \"string\"\r",
													"          },\r",
													"          \"message\": {\r",
													"            \"type\": \"string\"\r",
													"          }\r",
													"        },\r",
													"        \"required\": [\r",
													"          \"code\",\r",
													"          \"message\"\r",
													"        ]\r",
													"      }\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"errors\"\r",
													"  ]\r",
													"}\r",
													"\r",
													"pm.test('JSON schema is correct', function() {\r",
													"  pm.response.to.have.jsonSchema(responseSchema);\r",
													"});\r",
													"\r",
													"pm.test(\"Partial data validation in response body\", function () {\r",
													"    pm.expect(jsonData.errors[0].code).to.eql(\"IncorrectRequest\");\r",
													"    pm.expect(jsonData.errors[0].message).to.eql(\"The value '-100000000000' is not valid.\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "X-API-KEY",
												"value": "{{ApIKEY}}"
											}
										],
										"url": {
											"raw": "https://{{Host}}/api/content/v1/properties?since=UlUtNDE5NQ%3D%3D&count=-100000000000",
											"protocol": "https",
											"host": [
												"{{Host}}"
											],
											"path": [
												"api",
												"content",
												"v1",
												"properties"
											],
											"query": [
												{
													"key": "since",
													"value": "UlUtNDE5NQ%3D%3D"
												},
												{
													"key": "count",
													"value": "-100000000000"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "properties (id only) (wrong count) (2)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// ------ Response header param test\r",
													"\r",
													"pm.test(\"Response code is 400\", function () {\r",
													"    pm.response.to.have.status(400); \r",
													"});\r",
													"\r",
													"pm.test(\"Response time < 1000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
													"});\r",
													"\r",
													"pm.test(\"Response code contain string 'Bad Request'\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response headers is valid\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
													"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
													"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
													"    pm.response.to.have.header(\"X-Request-ID\");\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"// ------ Content tests\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"const responseSchema = {\r",
													"  \"title\": \"Generated schema for Root\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"errors\": {\r",
													"      \"type\": \"array\",\r",
													"      \"items\": {\r",
													"        \"type\": \"object\",\r",
													"        \"properties\": {\r",
													"          \"code\": {\r",
													"            \"type\": \"string\"\r",
													"          },\r",
													"          \"message\": {\r",
													"            \"type\": \"string\"\r",
													"          }\r",
													"        },\r",
													"        \"required\": [\r",
													"          \"code\",\r",
													"          \"message\"\r",
													"        ]\r",
													"      }\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"errors\"\r",
													"  ]\r",
													"}\r",
													"\r",
													"pm.test('JSON schema is correct', function() {\r",
													"  pm.response.to.have.jsonSchema(responseSchema);\r",
													"});\r",
													"\r",
													"pm.test(\"Partial data validation in response body\", function () {\r",
													"    pm.expect(jsonData.errors[0].code).to.eql(\"IncorrectRequest\");\r",
													"    pm.expect(jsonData.errors[0].message).to.eql(\"The value 'null' is not valid.\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "X-API-KEY",
												"value": "{{ApIKEY}}"
											}
										],
										"url": {
											"raw": "https://{{Host}}/api/content/v1/properties?since=UlUtNDE5NQ%3D%3D&count=null",
											"protocol": "https",
											"host": [
												"{{Host}}"
											],
											"path": [
												"api",
												"content",
												"v1",
												"properties"
											],
											"query": [
												{
													"key": "since",
													"value": "UlUtNDE5NQ%3D%3D"
												},
												{
													"key": "count",
													"value": "null"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "properties (id only) (unauthorized)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// ------ Response header param test\r",
													"\r",
													"pm.test(\"Response code is 401\", function () {\r",
													"    pm.response.to.have.status(401); \r",
													"});\r",
													"\r",
													"pm.test(\"Response time < 1000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
													"});\r",
													"\r",
													"pm.test(\"Response code contain string 'Unauthorizedt'\", function () {\r",
													"    pm.response.to.have.status(\"Unauthorized\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response headers is valid\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
													"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
													"    pm.response.to.have.header(\"X-Request-ID\");\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"\r",
													"// ------ Content tests\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"const responseSchema = {\r",
													"  \"title\": \"Generated schema for Root\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"message\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"message\"\r",
													"  ]\r",
													"}\r",
													"\r",
													"pm.test('JSON schema is correct', function() {\r",
													"  pm.response.to.have.jsonSchema(responseSchema);\r",
													"});\r",
													"\r",
													"pm.test(\"Partial data validation in response body\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Unauthorized\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "X-API-KEY",
												"value": "BAD_BOY"
											}
										],
										"url": {
											"raw": "https://{{Host}}/api/content/v1/properties?since=UlUtNDE5NQ%3D%3D&count=200",
											"protocol": "https",
											"host": [
												"{{Host}}"
											],
											"path": [
												"api",
												"content",
												"v1",
												"properties"
											],
											"query": [
												{
													"key": "since",
													"value": "UlUtNDE5NQ%3D%3D"
												},
												{
													"key": "count",
													"value": "200"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "properties (id only) (invalid since)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// ------ Response header param test\r",
													"\r",
													"pm.test(\"Response code is 400\", function () {\r",
													"    pm.response.to.have.status(400); \r",
													"});\r",
													"\r",
													"pm.test(\"Response time < 1000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
													"});\r",
													"\r",
													"pm.test(\"Response code contain string 'Bad Request'\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response headers is valid\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
													"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
													"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
													"    pm.response.to.have.header(\"X-Request-ID\");\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"// ------ Content tests\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"const responseSchema = {\r",
													"  \"title\": \"Generated schema for Root\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"errors\": {\r",
													"      \"type\": \"array\",\r",
													"      \"items\": {\r",
													"        \"type\": \"object\",\r",
													"        \"properties\": {\r",
													"          \"code\": {\r",
													"            \"type\": \"string\"\r",
													"          },\r",
													"          \"message\": {\r",
													"            \"type\": \"string\"\r",
													"          }\r",
													"        },\r",
													"        \"required\": [\r",
													"          \"code\",\r",
													"          \"message\"\r",
													"        ]\r",
													"      }\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"errors\"\r",
													"  ]\r",
													"}\r",
													"\r",
													"pm.test('JSON schema is correct', function() {\r",
													"  pm.response.to.have.jsonSchema(responseSchema);\r",
													"});\r",
													"\r",
													"pm.test(\"Partial data validation in response body\", function () {\r",
													"    pm.expect(jsonData.errors[0].code).to.eql(\"IncorrectRequest\");\r",
													"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid since 1\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "X-API-KEY",
												"value": "{{ApIKEY}}"
											}
										],
										"url": {
											"raw": "https://{{Host}}/api/content/v1/properties?since=1&count=200",
											"protocol": "https",
											"host": [
												"{{Host}}"
											],
											"path": [
												"api",
												"content",
												"v1",
												"properties"
											],
											"query": [
												{
													"key": "since",
													"value": "1"
												},
												{
													"key": "count",
													"value": "200"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "properties (id only) (???)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// ------ Response header param test\r",
													"\r",
													"pm.test(\"Response code is 200\", function () {\r",
													"    pm.response.to.have.status(200); \r",
													"});\r",
													"\r",
													"pm.test(\"Response time < 1000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
													"});\r",
													"\r",
													"pm.test(\"Response code contain string 'OK'\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response headers is valid\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
													"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
													"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
													"    pm.response.to.have.header(\"X-Request-ID\");\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"\r",
													"// ------ Content tests\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"const responseSchema = {\r",
													"  \"title\": \"Generated schema for Root\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"properties\": {\r",
													"      \"type\": \"array\",\r",
													"      \"items\": {\r",
													"        \"type\": \"object\",\r",
													"        \"properties\": {\r",
													"          \"id\": {\r",
													"            \"type\": \"string\"\r",
													"          }\r",
													"        },\r",
													"        \"required\": [\r",
													"          \"id\"\r",
													"        ]\r",
													"      }\r",
													"    },\r",
													"    \"warnings\": {\r",
													"      \"type\": \"array\",\r",
													"      \"items\": {}\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"properties\",\r",
													"    \"warnings\"\r",
													"  ]\r",
													"}\r",
													"\r",
													"pm.test('JSON schema is correct', function() {\r",
													"  pm.response.to.have.jsonSchema(responseSchema);\r",
													"});\r",
													"\r",
													"// pm.test(\"Partial data validation in response body\", function () {\r",
													"//     pm.expect(jsonData.properties[0].id).to.eql(\"5019\");\r",
													"// });\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "X-API-KEY",
												"value": "{{ApIKEY}}"
											}
										],
										"url": {
											"raw": "https://{{Host}}/api/content/v1/properties?since=null&count=200",
											"protocol": "https",
											"host": [
												"{{Host}}"
											],
											"path": [
												"api",
												"content",
												"v1",
												"properties"
											],
											"query": [
												{
													"key": "since",
													"value": "null"
												},
												{
													"key": "count",
													"value": "200"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "properties/{propertyId}",
							"item": [
								{
									"name": "properties/{propertyId} (ok)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// ------ Response header param test\r",
													"\r",
													"pm.test(\"Response code is 200\", function () {\r",
													"    pm.response.to.have.status(200); \r",
													"});\r",
													"\r",
													"pm.test(\"Response time < 1000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
													"});\r",
													"\r",
													"pm.test(\"Response code contain string 'OK'\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response headers is valid\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
													"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
													"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
													"    pm.response.to.have.header(\"X-Request-ID\");\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"\r",
													"// ------ Content tests\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Partial data validation in response body\", function () {\r",
													"    pm.expect(jsonData.id).to.eql(\"8155\");\r",
													"    pm.expect(jsonData.name).to.eql(\"PartnerAPI для интеграции 2\");\r",
													"    pm.expect(jsonData.description).to.eql(\"Отель официально подтверждает уровень 3-х звездочного отеля своим сервисом и качеством оказываемых услуг.\\nДо пляжа можно дойти всего за 1 минуту. Отель расположен в самом сердце города, в 80 метрах от центрального песчаного пляжа и набережной. К услугам гостей бесплатный Wi-Fi и бесплатная частная парковка на 12 автомобилей.\\nСтойка регистрации работает круглосуточно.\\nКаждое утро сервируют завтрак «шведский стол» со свежемолотым кофе.\");\r",
													"    pm.expect(jsonData.images).to.be;\r",
													"    pm.expect(jsonData.images[0].url).to.include(\"https://\");\r",
													"    pm.expect(jsonData.stars).to.eql(3);\r",
													"    pm.expect(jsonData.stayUnitKind).to.eql(\"NightRate\");\r",
													"\r",
													"    pm.expect(jsonData.contactInfo).to.be;\r",
													"    pm.expect(jsonData.contactInfo.address).to.be;\r",
													"    pm.expect(jsonData.contactInfo.address.postalCode).to.eql(\"424008\");\r",
													"    pm.expect(jsonData.contactInfo.address.countryCode).to.eql(\"RUS\");\r",
													"    pm.expect(jsonData.contactInfo.address.region).to.eql(\"Республика Марий Эл\");\r",
													"    pm.expect(jsonData.contactInfo.address.regionId).to.eql(\"44\");\r",
													"    pm.expect(jsonData.contactInfo.address.cityName).to.eql(\"Йошкар-Ола\");\r",
													"    pm.expect(jsonData.contactInfo.address.cityId).to.eql(\"1\");\r",
													"    pm.expect(jsonData.contactInfo.address.addressLine).to.eql(\"Республика Марий Эл, Республика Марий Эл район, г. Йошкар-Ола, ул. Петрова, д. 21\");\r",
													"    pm.expect(jsonData.contactInfo.address.latitude).to.eql(45.036738);\r",
													"    pm.expect(jsonData.contactInfo.address.longitude).to.eql(38.973696);\r",
													"\r",
													"    pm.expect(jsonData.contactInfo.phones).to.be;\r",
													"    pm.expect(jsonData.contactInfo.phones[0].phoneNumber).to.eql(\"+7 (861) 2-750-750\");\r",
													"    pm.expect(jsonData.contactInfo.phones[0].techType).to.eql(\"Fax\");\r",
													"    pm.expect(jsonData.contactInfo.phones[0].remark).to.be;\r",
													"\r",
													"    pm.expect(jsonData.contactInfo.emails).to.be;\r",
													"    pm.expect(jsonData.contactInfo.emails[0]).to.include(\"aurhotel_test@mail.ru\");\r",
													"\r",
													"    pm.expect(jsonData.policy).to.be;\r",
													"    pm.expect(jsonData.policy.checkInTime).to.include(\"14:00\");\r",
													"    pm.expect(jsonData.policy.checkOutTime).to.include(\"12:00\");\r",
													"\r",
													"    pm.expect(jsonData.ratePlans[0]).to.be;\r",
													"    pm.expect(jsonData.ratePlans[0].id).to.eql(\"335370\");\r",
													"    pm.expect(jsonData.ratePlans[0].name).to.eql(\"Лучшая цена дня\");\r",
													"    pm.expect(jsonData.ratePlans[0].description).to.eql(\"Самый выгодный тариф для бронирования на официальном сайте.\");\r",
													"    pm.expect(jsonData.ratePlans[0].currency).to.eql(\"RUB\");\r",
													"\r",
													"    pm.expect(jsonData.roomTypes[0]).to.be;\r",
													"    pm.expect(jsonData.roomTypes[0].id).to.eql(\"349642\");\r",
													"    pm.expect(jsonData.roomTypes[0].name).to.eql(\"Стандарт\");\r",
													"    pm.expect(jsonData.roomTypes[0].description).to.eql(\"Комфортный стандартный номер с красивым декором.\");\r",
													"    pm.expect(jsonData.roomTypes[0].amenities[1].code).to.eql(\"wifi_internet\");\r",
													"    pm.expect(jsonData.roomTypes[0].amenities[1].name).to.eql(\"Wi-Fi-интернет\");\r",
													"    pm.expect(jsonData.roomTypes[0].images[0].url).to.include(\"https://\");\r",
													"\r",
													"    pm.expect(jsonData.roomTypes[0].size.value).to.eql(0); // ошибка?\r",
													"    pm.expect(jsonData.roomTypes[0].size.unit).to.eql(\"SquareMetre\");\r",
													"\r",
													"    pm.expect(jsonData.roomTypes[0].categoryCode).to.eql(\"Room\");\r",
													"    pm.expect(jsonData.roomTypes[0].categoryName).to.eql(\"Номер\");\r",
													"\r",
													"    pm.expect(jsonData.roomTypes[0].occupancy.adultBed).to.eql(2);\r",
													"    pm.expect(jsonData.roomTypes[0].occupancy.extraBed).to.eql(1);\r",
													"    pm.expect(jsonData.roomTypes[0].occupancy.childWithoutBed).to.eql(1);\r",
													"\r",
													"    pm.expect(jsonData.roomTypes[0].position).to.eql(0);\r",
													"\r",
													"});\r",
													"\r",
													"const responseSchema = {\r",
													"  \"title\": \"Generated schema for Root\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"id\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"name\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"description\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"currency\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"images\": {\r",
													"      \"type\": \"array\",\r",
													"      \"items\": {\r",
													"        \"type\": \"object\",\r",
													"        \"properties\": {\r",
													"          \"url\": {\r",
													"            \"type\": \"string\"\r",
													"          }\r",
													"        },\r",
													"        \"required\": [\r",
													"          \"url\"\r",
													"        ]\r",
													"      }\r",
													"    },\r",
													"    \"stars\": {\r",
													"      \"type\": \"number\"\r",
													"    },\r",
													"    \"stayUnitKind\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"contactInfo\": {\r",
													"      \"type\": \"object\",\r",
													"      \"properties\": {\r",
													"        \"address\": {\r",
													"          \"type\": \"object\",\r",
													"          \"properties\": {\r",
													"            \"postalCode\": {\r",
													"              \"type\": \"string\"\r",
													"            },\r",
													"            \"countryCode\": {\r",
													"              \"type\": \"string\"\r",
													"            },\r",
													"            \"region\": {\r",
													"              \"type\": \"string\"\r",
													"            },\r",
													"            \"regionId\": {\r",
													"              \"type\": \"string\"\r",
													"            },\r",
													"            \"cityName\": {\r",
													"              \"type\": \"string\"\r",
													"            },\r",
													"            \"cityId\": {\r",
													"              \"type\": \"string\"\r",
													"            },\r",
													"            \"addressLine\": {\r",
													"              \"type\": \"string\"\r",
													"            },\r",
													"            \"latitude\": {\r",
													"              \"type\": \"number\"\r",
													"            },\r",
													"            \"longitude\": {\r",
													"              \"type\": \"number\"\r",
													"            }\r",
													"          },\r",
													"          \"required\": [\r",
													"            \"postalCode\",\r",
													"            \"countryCode\",\r",
													"            \"region\",\r",
													"            \"regionId\",\r",
													"            \"cityName\",\r",
													"            \"cityId\",\r",
													"            \"addressLine\",\r",
													"            \"latitude\",\r",
													"            \"longitude\"\r",
													"          ]\r",
													"        },\r",
													"        \"phones\": {\r",
													"          \"type\": \"array\",\r",
													"          \"items\": {\r",
													"            \"type\": \"object\",\r",
													"            \"properties\": {\r",
													"              \"phoneNumber\": {\r",
													"                \"type\": \"string\"\r",
													"              },\r",
													"              \"techType\": {\r",
													"                \"type\": \"string\"\r",
													"              },\r",
													"              \"remark\": {\r",
													"                \"type\": \"string\"\r",
													"              }\r",
													"            },\r",
													"            \"required\": [\r",
													"              \"phoneNumber\",\r",
													"              \"techType\",\r",
													"              \"remark\"\r",
													"            ]\r",
													"          }\r",
													"        },\r",
													"        \"emails\": {\r",
													"          \"type\": \"array\",\r",
													"          \"items\": {\r",
													"            \"type\": \"string\"\r",
													"          }\r",
													"        }\r",
													"      },\r",
													"      \"required\": [\r",
													"        \"address\",\r",
													"        \"phones\",\r",
													"        \"emails\"\r",
													"      ]\r",
													"    },\r",
													"    \"policy\": {\r",
													"      \"type\": \"object\",\r",
													"      \"properties\": {\r",
													"        \"checkInTime\": {\r",
													"          \"type\": \"string\"\r",
													"        },\r",
													"        \"checkOutTime\": {\r",
													"          \"type\": \"string\"\r",
													"        }\r",
													"      },\r",
													"      \"required\": [\r",
													"        \"checkInTime\",\r",
													"        \"checkOutTime\"\r",
													"      ]\r",
													"    },\r",
													"    \"ratePlans\": {\r",
													"      \"type\": \"array\",\r",
													"      \"items\": {\r",
													"        \"type\": \"object\",\r",
													"        \"properties\": {\r",
													"          \"id\": {\r",
													"            \"type\": \"string\"\r",
													"          },\r",
													"          \"name\": {\r",
													"            \"type\": \"string\"\r",
													"          },\r",
													"          \"description\": {\r",
													"            \"type\": \"string\"\r",
													"          },\r",
													"          \"currency\": {\r",
													"            \"type\": \"string\"\r",
													"          }\r",
													"        },\r",
													"        \"required\": [\r",
													"          \"id\",\r",
													"          \"name\",\r",
													"          \"description\",\r",
													"          \"currency\"\r",
													"        ]\r",
													"      }\r",
													"    },\r",
													"    \"roomTypes\": {\r",
													"      \"type\": \"array\",\r",
													"      \"items\": {\r",
													"        \"type\": \"object\",\r",
													"        \"properties\": {\r",
													"          \"id\": {\r",
													"            \"type\": \"string\"\r",
													"          },\r",
													"          \"name\": {\r",
													"            \"type\": \"string\"\r",
													"          },\r",
													"          \"description\": {\r",
													"            \"type\": \"string\"\r",
													"          },\r",
													"          \"amenities\": {\r",
													"            \"type\": \"array\",\r",
													"            \"items\": {\r",
													"              \"type\": \"object\",\r",
													"              \"properties\": {\r",
													"                \"code\": {\r",
													"                  \"type\": \"string\"\r",
													"                },\r",
													"                \"name\": {\r",
													"                  \"type\": \"string\"\r",
													"                }\r",
													"              },\r",
													"              \"required\": [\r",
													"                \"code\",\r",
													"                \"name\"\r",
													"              ]\r",
													"            }\r",
													"          },\r",
													"          \"images\": {\r",
													"            \"type\": \"array\",\r",
													"            \"items\": {\r",
													"              \"type\": \"object\",\r",
													"              \"properties\": {\r",
													"                \"url\": {\r",
													"                  \"type\": \"string\"\r",
													"                }\r",
													"              },\r",
													"              \"required\": [\r",
													"                \"url\"\r",
													"              ]\r",
													"            }\r",
													"          },\r",
													"          \"size\": {\r",
													"            \"type\": \"object\",\r",
													"            \"properties\": {\r",
													"              \"value\": {\r",
													"                \"type\": \"number\"\r",
													"              },\r",
													"              \"unit\": {\r",
													"                \"type\": \"string\"\r",
													"              }\r",
													"            },\r",
													"            \"required\": [\r",
													"              \"value\",\r",
													"              \"unit\"\r",
													"            ]\r",
													"          },\r",
													"          \"categoryCode\": {\r",
													"            \"type\": \"string\"\r",
													"          },\r",
													"          \"categoryName\": {\r",
													"            \"type\": \"string\"\r",
													"          },\r",
													"          \"occupancy\": {\r",
													"            \"type\": \"object\",\r",
													"            \"properties\": {\r",
													"              \"adultBed\": {\r",
													"                \"type\": \"number\"\r",
													"              },\r",
													"              \"extraBed\": {\r",
													"                \"type\": \"number\"\r",
													"              },\r",
													"              \"childWithoutBed\": {\r",
													"                \"type\": \"number\"\r",
													"              }\r",
													"            },\r",
													"            \"required\": [\r",
													"              \"adultBed\",\r",
													"              \"extraBed\",\r",
													"              \"childWithoutBed\"\r",
													"            ]\r",
													"          },\r",
													"          \"position\": {\r",
													"            \"type\": \"number\"\r",
													"          }\r",
													"        },\r",
													"        \"required\": [\r",
													"          \"id\",\r",
													"          \"name\",\r",
													"          \"description\",\r",
													"          \"amenities\",\r",
													"          \"images\",\r",
													"          \"size\",\r",
													"          \"categoryCode\",\r",
													"          \"categoryName\",\r",
													"          \"occupancy\",\r",
													"          \"position\"\r",
													"        ]\r",
													"      }\r",
													"    },\r",
													"    \"services\": {\r",
													"      \"type\": \"array\",\r",
													"      \"items\": {\r",
													"        \"type\": \"object\",\r",
													"        \"properties\": {\r",
													"          \"id\": {\r",
													"            \"type\": \"string\"\r",
													"          },\r",
													"          \"name\": {\r",
													"            \"type\": \"string\"\r",
													"          },\r",
													"          \"description\": {\r",
													"            \"type\": \"string\"\r",
													"          },\r",
													"          \"kind\": {\r",
													"            \"type\": \"string\"\r",
													"          },\r",
													"          \"mealPlanCode\": {\r",
													"            \"type\": \"string\"\r",
													"          },\r",
													"          \"mealPlanName\": {\r",
													"            \"type\": \"string\"\r",
													"          }\r",
													"        },\r",
													"        \"required\": [\r",
													"          \"id\",\r",
													"          \"name\",\r",
													"          \"description\",\r",
													"          \"kind\"\r",
													"        ]\r",
													"      }\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"id\",\r",
													"    \"name\",\r",
													"    \"description\",\r",
													"    \"currency\",\r",
													"    \"images\",\r",
													"    \"stars\",\r",
													"    \"stayUnitKind\",\r",
													"    \"contactInfo\",\r",
													"    \"policy\",\r",
													"    \"ratePlans\",\r",
													"    \"roomTypes\",\r",
													"    \"services\"\r",
													"  ]\r",
													"}\r",
													"\r",
													"pm.test(' Heavy JSON schema is correct', function() {\r",
													"  pm.response.to.have.jsonSchema(responseSchema);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "X-API-KEY",
												"value": "{{ApIKEY}}"
											}
										],
										"url": {
											"raw": "https://{{Host}}/api/content/v1/properties/{{propertyId}}",
											"protocol": "https",
											"host": [
												"{{Host}}"
											],
											"path": [
												"api",
												"content",
												"v1",
												"properties",
												"{{propertyId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "properties/{propertyId} (unauthorized)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// ------ Response header param test\r",
													"\r",
													"pm.test(\"Response code is 401\", function () {\r",
													"    pm.response.to.have.status(401); \r",
													"});\r",
													"\r",
													"pm.test(\"Response time < 1000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
													"});\r",
													"\r",
													"pm.test(\"Response code contain string 'Unauthorizedt'\", function () {\r",
													"    pm.response.to.have.status(\"Unauthorized\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response headers is valid\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
													"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
													"    pm.response.to.have.header(\"X-Request-ID\");\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"\r",
													"// ------ Content tests\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"const responseSchema = {\r",
													"  \"title\": \"Generated schema for Root\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"message\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"message\"\r",
													"  ]\r",
													"}\r",
													"\r",
													"pm.test('JSON schema is correct', function() {\r",
													"  pm.response.to.have.jsonSchema(responseSchema);\r",
													"});\r",
													"\r",
													"pm.test(\"Partial data validation in response body\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Unauthorized\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "X-API-KEY",
												"value": "BAD_BOY"
											}
										],
										"url": {
											"raw": "https://{{Host}}/api/content/v1/properties/{{propertyId}}",
											"protocol": "https",
											"host": [
												"{{Host}}"
											],
											"path": [
												"api",
												"content",
												"v1",
												"properties",
												"{{propertyId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "properties/{propertyId} (wrong id) (NotEnoughRights)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// ------ Response header param test\r",
													"\r",
													"pm.test(\"Response code is 403\", function () {\r",
													"    pm.response.to.have.status(403); \r",
													"});\r",
													"\r",
													"pm.test(\"Response time < 1000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
													"});\r",
													"\r",
													"pm.test(\"Response code contain string 'Forbidden'\", function () {\r",
													"    pm.response.to.have.status(\"Forbidden\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response headers is valid\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
													"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
													"    pm.response.to.have.header(\"X-Request-ID\");\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"\r",
													"// ------ Content tests\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"const responseSchema = {\r",
													"  \"title\": \"Generated schema for Root\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"errors\": {\r",
													"      \"type\": \"array\",\r",
													"      \"items\": {\r",
													"        \"type\": \"object\",\r",
													"        \"properties\": {\r",
													"          \"code\": {\r",
													"            \"type\": \"string\"\r",
													"          },\r",
													"          \"message\": {\r",
													"            \"type\": \"string\"\r",
													"          }\r",
													"        },\r",
													"        \"required\": [\r",
													"          \"code\",\r",
													"          \"message\"\r",
													"        ]\r",
													"      }\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"errors\"\r",
													"  ]\r",
													"}\r",
													"\r",
													"pm.test('JSON schema is correct', function() {\r",
													"  pm.response.to.have.jsonSchema(responseSchema);\r",
													"});\r",
													"\r",
													"pm.test(\"Partial data validation in response body\", function () {\r",
													"    pm.expect(jsonData.errors[0].code).to.eql(\"NotEnoughRights\");\r",
													"    pm.expect(jsonData.errors[0].message).to.eql(\"Not enough rights to hotel\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "X-API-KEY",
												"value": "{{ApIKEY}}"
											}
										],
										"url": {
											"raw": "https://{{Host}}/api/content/v1/properties/0",
											"protocol": "https",
											"host": [
												"{{Host}}"
											],
											"path": [
												"api",
												"content",
												"v1",
												"properties",
												"0"
											]
										}
									},
									"response": []
								},
								{
									"name": "properties/{propertyId} (wrong id) (lit)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// ------ Response header param test\r",
													"\r",
													"pm.test(\"Response code is 400\", function () {\r",
													"    pm.response.to.have.status(400); \r",
													"});\r",
													"\r",
													"pm.test(\"Response time < 1000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
													"});\r",
													"\r",
													"pm.test(\"Response code contain string 'Bad Request'\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response headers is valid\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
													"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
													"    pm.response.to.have.header(\"X-Request-ID\");\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"\r",
													"// ------ Content tests\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"const responseSchema = {\r",
													"  \"title\": \"Generated schema for Root\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"errors\": {\r",
													"      \"type\": \"array\",\r",
													"      \"items\": {\r",
													"        \"type\": \"object\",\r",
													"        \"properties\": {\r",
													"          \"code\": {\r",
													"            \"type\": \"string\"\r",
													"          },\r",
													"          \"message\": {\r",
													"            \"type\": \"string\"\r",
													"          }\r",
													"        },\r",
													"        \"required\": [\r",
													"          \"code\",\r",
													"          \"message\"\r",
													"        ]\r",
													"      }\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"errors\"\r",
													"  ]\r",
													"}\r",
													"\r",
													"pm.test('JSON schema is correct', function() {\r",
													"  pm.response.to.have.jsonSchema(responseSchema);\r",
													"});\r",
													"\r",
													"pm.test(\"Partial data validation in response body\", function () {\r",
													"    pm.expect(jsonData.errors[0].code).to.eql(\"IncorrectRequest\");\r",
													"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid propertyId: a\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "X-API-KEY",
												"value": "{{ApIKEY}}"
											}
										],
										"url": {
											"raw": "https://{{Host}}/api/content/v1/properties/a",
											"protocol": "https",
											"host": [
												"{{Host}}"
											],
											"path": [
												"api",
												"content",
												"v1",
												"properties",
												"a"
											]
										}
									},
									"response": []
								},
								{
									"name": "properties/{propertyId} (wrong id) (num)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// ------ Response header param test\r",
													"\r",
													"pm.test(\"Response code is 400\", function () {\r",
													"    pm.response.to.have.status(400); \r",
													"});\r",
													"\r",
													"pm.test(\"Response time < 1000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
													"});\r",
													"\r",
													"pm.test(\"Response code contain string 'Bad Request'\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response headers is valid\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
													"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
													"    pm.response.to.have.header(\"X-Request-ID\");\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"});\r",
													"\r",
													"\r",
													"// ------ Content tests\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"const responseSchema = {\r",
													"  \"title\": \"Generated schema for Root\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"errors\": {\r",
													"      \"type\": \"array\",\r",
													"      \"items\": {\r",
													"        \"type\": \"object\",\r",
													"        \"properties\": {\r",
													"          \"code\": {\r",
													"            \"type\": \"string\"\r",
													"          },\r",
													"          \"message\": {\r",
													"            \"type\": \"string\"\r",
													"          }\r",
													"        },\r",
													"        \"required\": [\r",
													"          \"code\",\r",
													"          \"message\"\r",
													"        ]\r",
													"      }\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"errors\"\r",
													"  ]\r",
													"}\r",
													"\r",
													"pm.test('JSON schema is correct', function() {\r",
													"  pm.response.to.have.jsonSchema(responseSchema);\r",
													"});\r",
													"\r",
													"pm.test(\"Partial data validation in response body\", function () {\r",
													"    pm.expect(jsonData.errors[0].code).to.eql(\"IncorrectRequest\");\r",
													"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid propertyId: 111111111111111\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "X-API-KEY",
												"value": "{{ApIKEY}}"
											}
										],
										"url": {
											"raw": "https://{{Host}}/api/content/v1/properties/111111111111111",
											"protocol": "https",
											"host": [
												"{{Host}}"
											],
											"path": [
												"api",
												"content",
												"v1",
												"properties",
												"111111111111111"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "meal-plans",
					"item": [
						{
							"name": "meal-plans (ok)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ------ Response header param test\r",
											"\r",
											"pm.test(\"Response code is 200\", function () {\r",
											"    pm.response.to.have.status(200); \r",
											"});\r",
											"\r",
											"pm.test(\"Response time < 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response code contain string 'OK'\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response headers is valid\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"X-Request-ID\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"\r",
											"// ------ Content tests\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"const responseSchema = {\r",
											"  \"title\": \"Generated schema for Root\",\r",
											"  \"type\": \"array\",\r",
											"  \"items\": {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"      \"code\": {\r",
											"        \"type\": \"string\"\r",
											"      },\r",
											"      \"name\": {\r",
											"        \"type\": \"string\"\r",
											"      }\r",
											"    },\r",
											"    \"required\": [\r",
											"      \"code\",\r",
											"      \"name\"\r",
											"    ]\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test('JSON schema is correct', function () {\r",
											"  pm.response.to.have.jsonSchema(responseSchema);\r",
											"});\r",
											"\r",
											"const idealResponse = [\r",
											"    {\r",
											"        \"code\": \"AllInclusive\",\r",
											"        \"name\": \"Все включено\"\r",
											"    },\r",
											"    {\r",
											"        \"code\": \"BuffetBreakfast\",\r",
											"        \"name\": \"Завтрак (шведский стол)\"\r",
											"    },\r",
											"    {\r",
											"        \"code\": \"ContinentalBreakfast\",\r",
											"        \"name\": \"Континентальный завтрак\"\r",
											"    },\r",
											"    {\r",
											"        \"code\": \"EnglishBreakfast\",\r",
											"        \"name\": \"Английский завтрак\"\r",
											"    },\r",
											"    {\r",
											"        \"code\": \"FullBoard\",\r",
											"        \"name\": \"Полный пансион\"\r",
											"    },\r",
											"    {\r",
											"        \"code\": \"HalfBoard\",\r",
											"        \"name\": \"Полупансион\"\r",
											"    },\r",
											"    {\r",
											"        \"code\": \"BreakFast\",\r",
											"        \"name\": \"Завтрак\"\r",
											"    },\r",
											"    {\r",
											"        \"code\": \"Lunch\",\r",
											"        \"name\": \"Обед\"\r",
											"    },\r",
											"    {\r",
											"        \"code\": \"Dinner\",\r",
											"        \"name\": \"Ужин\"\r",
											"    },\r",
											"    {\r",
											"        \"code\": \"FullBoardBuffet\",\r",
											"        \"name\": \"Полный пансион \\\"шведский стол\\\"\"\r",
											"    },\r",
											"    {\r",
											"        \"code\": \"FullBoardCarte\",\r",
											"        \"name\": \"Полный пансион \\\"заказное меню\\\"\"\r",
											"    },\r",
											"    {\r",
											"        \"code\": \"BuffetDinner\",\r",
											"        \"name\": \"Ужин \\\"шведский стол\\\"\"\r",
											"    },\r",
											"    {\r",
											"        \"code\": \"DinnerCarte\",\r",
											"        \"name\": \"Ужин \\\"заказное меню\\\"\"\r",
											"    },\r",
											"    {\r",
											"        \"code\": \"Custom\",\r",
											"        \"name\": \"Свой тип питания\"\r",
											"    },\r",
											"    {\r",
											"        \"code\": \"HalfBoardLunch\",\r",
											"        \"name\": \"Полупансион (завтрак + обед)\"\r",
											"    },\r",
											"    {\r",
											"        \"code\": \"HalfBoardDinner\",\r",
											"        \"name\": \"Полупансион (завтрак + ужин)\"\r",
											"    },\r",
											"    {\r",
											"        \"code\": \"AmericanBreakfast\",\r",
											"        \"name\": \"Завтрак \\\"Американский\\\"\"\r",
											"    },\r",
											"    {\r",
											"        \"code\": \"HalfBoardLunchDinner\",\r",
											"        \"name\": \"Полупансион (обед и ужин)\"\r",
											"    },\r",
											"    {\r",
											"        \"code\": \"UltraAllInclusive\",\r",
											"        \"name\": \"Ультра все включено\"\r",
											"    },\r",
											"    {\r",
											"        \"code\": \"RoomOnly\",\r",
											"        \"name\": \"Без питания\"\r",
											"    }\r",
											"]\r",
											"\r",
											"pm.test('Response matches reference', function () {\r",
											"    const isEqual = _.isEqual(idealResponse, jsonData);\r",
											"    pm.expect(isEqual).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "X-API-KEY",
										"value": "{{ApIKEY}}",
										"type": "default"
									}
								],
								"url": {
									"raw": "https://{{Host}}/api/content/v1/meal-plans",
									"protocol": "https",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"content",
										"v1",
										"meal-plans"
									]
								}
							},
							"response": []
						},
						{
							"name": "meal-plans (unauthorized)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ------ Response header param test\r",
											"\r",
											"pm.test(\"Response code is 401\", function () {\r",
											"    pm.response.to.have.status(401); \r",
											"});\r",
											"\r",
											"pm.test(\"Response time < 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response code contain string 'Unauthorizedt'\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response headers is valid\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"X-Request-ID\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"\r",
											"// ------ Content tests\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"const responseSchema = {\r",
											"  \"title\": \"Generated schema for Root\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test('JSON schema is correct', function () {\r",
											"  pm.response.to.have.jsonSchema(responseSchema);\r",
											"});\r",
											"\r",
											"pm.test(\"Partial data validation in response body\", function () {\r",
											"    pm.expect(jsonData.message).to.include(\"Unauthorized\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "X-API-KEY",
										"value": "BAD_BOY",
										"type": "default"
									}
								],
								"url": {
									"raw": "https://{{Host}}/api/content/v1/meal-plans",
									"protocol": "https",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"content",
										"v1",
										"meal-plans"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "room-type-categories",
					"item": [
						{
							"name": "room-type-categories (ok)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ------ Response header param test\r",
											"\r",
											"pm.test(\"Response code is 200\", function () {\r",
											"    pm.response.to.have.status(200); \r",
											"});\r",
											"\r",
											"pm.test(\"Response time < 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response code contain string 'OK'\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response headers is valid\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"X-Request-ID\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"\r",
											"// ------ Content tests\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"const responseSchema = {\r",
											"  \"title\": \"Generated schema for Root\",\r",
											"  \"type\": \"array\",\r",
											"  \"items\": {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"      \"code\": {\r",
											"        \"type\": \"string\"\r",
											"      },\r",
											"      \"name\": {\r",
											"        \"type\": \"string\"\r",
											"      }\r",
											"    },\r",
											"    \"required\": [\r",
											"      \"code\",\r",
											"      \"name\"\r",
											"    ]\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test('JSON schema is correct', function () {\r",
											"  pm.response.to.have.jsonSchema(responseSchema);\r",
											"});\r",
											"\r",
											"const idealResponse = [\r",
											"    {\r",
											"        \"code\": \"Room\",\r",
											"        \"name\": \"Номер\"\r",
											"    },\r",
											"    {\r",
											"        \"code\": \"PlaceInRoom\",\r",
											"        \"name\": \"Место в номере\"\r",
											"    },\r",
											"    {\r",
											"        \"code\": \"Cottage\",\r",
											"        \"name\": \"Коттедж\"\r",
											"    },\r",
											"    {\r",
											"        \"code\": \"Apartments\",\r",
											"        \"name\": \"Аппартаменты\"\r",
											"    },\r",
											"    {\r",
											"        \"code\": \"Studio\",\r",
											"        \"name\": \"Студия\"\r",
											"    },\r",
											"    {\r",
											"        \"code\": \"Flat\",\r",
											"        \"name\": \"Квартира\"\r",
											"    },\r",
											"    {\r",
											"        \"code\": \"House\",\r",
											"        \"name\": \"Дом\"\r",
											"    },\r",
											"    {\r",
											"        \"code\": \"Villa\",\r",
											"        \"name\": \"Вилла\"\r",
											"    }\r",
											"]\r",
											"\r",
											"pm.test('Response matches reference', function () {\r",
											"    const isEqual = _.isEqual(idealResponse, jsonData);\r",
											"    pm.expect(isEqual).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "X-API-KEY",
										"value": "{{ApIKEY}}",
										"type": "default"
									}
								],
								"url": {
									"raw": "https://{{Host}}/api/content/v1/room-type-categories",
									"protocol": "https",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"content",
										"v1",
										"room-type-categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "room-type-categories (unauthorized)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ------ Response header param test\r",
											"\r",
											"pm.test(\"Response code is 401\", function () {\r",
											"    pm.response.to.have.status(401); \r",
											"});\r",
											"\r",
											"pm.test(\"Response time < 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response code contain string 'Unauthorizedt'\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response headers is valid\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"X-Request-ID\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"\r",
											"// ------ Content tests\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"const responseSchema = {\r",
											"  \"title\": \"Generated schema for Root\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test('JSON schema is correct', function () {\r",
											"  pm.response.to.have.jsonSchema(responseSchema);\r",
											"});\r",
											"\r",
											"pm.test(\"Partial data validation in response body\", function () {\r",
											"    pm.expect(jsonData.message).to.include(\"Unauthorized\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "X-API-KEY",
										"value": "BAD_BOY",
										"type": "default"
									}
								],
								"url": {
									"raw": "https://{{Host}}/api/content/v1/room-type-categories",
									"protocol": "https",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"content",
										"v1",
										"room-type-categories"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "room-amenity-categories",
					"item": [
						{
							"name": "room-amenity-categories (ok)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ------ Response header param test\r",
											"\r",
											"pm.test(\"Response code is 200\", function () {\r",
											"    pm.response.to.have.status(200); \r",
											"});\r",
											"\r",
											"pm.test(\"Response time < 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response code contain string 'OK'\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response headers is valid\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"X-Request-ID\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"\r",
											"// ------ Content tests\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"const responseSchema = {\r",
											"  \"title\": \"Generated schema for Root\",\r",
											"  \"type\": \"array\",\r",
											"  \"items\": {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"      \"name\": {\r",
											"        \"type\": \"string\"\r",
											"      },\r",
											"      \"amenities\": {\r",
											"        \"type\": \"array\",\r",
											"        \"items\": {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"name\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"code\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"name\",\r",
											"            \"code\"\r",
											"          ]\r",
											"        }\r",
											"      }\r",
											"    },\r",
											"    \"required\": [\r",
											"      \"name\",\r",
											"      \"amenities\"\r",
											"    ]\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.test('JSON schema is correct', function () {\r",
											"  pm.response.to.have.jsonSchema(responseSchema);\r",
											"});\r",
											"\r",
											"const idealInternetPhone = {\r",
											"    \"name\": \"Интернет/телефония\",\r",
											"    \"amenities\": [\r",
											"        {\r",
											"            \"name\": \"Wi-Fi-интернет\",\r",
											"            \"code\": \"wifi_internet\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"интернет\",\r",
											"            \"code\": \"internet\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"телефон\",\r",
											"            \"code\": \"telephone\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"IP-телефон\",\r",
											"            \"code\": \"ip_telephone\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"две телефонные линии\",\r",
											"            \"code\": \"two_line_phone\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"роутер\",\r",
											"            \"code\": \"121\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"внутренний телефон\",\r",
											"            \"code\": \"in_room_telephone\"\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"\r",
											"const idealVideoAudio = {\r",
											"    \"name\": \"Видео/аудио\",\r",
											"    \"amenities\": [\r",
											"        {\r",
											"            \"name\": \"телевизор\",\r",
											"            \"code\": \"tv\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"спутниковое телевидение\",\r",
											"            \"code\": \"satellite_television\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"кабельное телевидение\",\r",
											"            \"code\": \"cable_television\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"интерактивное телевидение\",\r",
											"            \"code\": \"interactive_web_tv\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"DVD-плеер\",\r",
											"            \"code\": \"dvd_player\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"подборка видео/аудио\",\r",
											"            \"code\": \"movies\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"домашний кинотеатр\",\r",
											"            \"code\": \"home_cinema\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"караоке\",\r",
											"            \"code\": \"karaoke\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"музыкальный центр\",\r",
											"            \"code\": \"media_center\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"телевизор с плоским экраном\",\r",
											"            \"code\": \"flat_screen_TV\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"цифровое тв\",\r",
											"            \"code\": \"digital_tv\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"HBO (Американская телевизионная сеть)\",\r",
											"            \"code\": \"hbo\"\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"\r",
											"const idealOther = {\r",
											"    \"name\": \"Прочее\",\r",
											"    \"amenities\": [\r",
											"        {\r",
											"            \"name\": \"гладильная доска\",\r",
											"            \"code\": \"ironing_board\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"две комнаты\",\r",
											"            \"code\": \"two_rooms\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"кухня\",\r",
											"            \"code\": \"kitchen\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"звуконепроницаемые стены и окна\",\r",
											"            \"code\": \"soundproofed_room\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"мини-бар\",\r",
											"            \"code\": \"minibar\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"камин\",\r",
											"            \"code\": \"fireplace\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"письменные принадлежности\",\r",
											"            \"code\": \"writing_utensils\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"свежая пресса\",\r",
											"            \"code\": \"daily_press\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"чайный набор\",\r",
											"            \"code\": \"tea_set\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"набор посуды\",\r",
											"            \"code\": \"set_of_dishes\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"обслуживание номеров\",\r",
											"            \"code\": \"maid_service\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"информационная карта, меню\",\r",
											"            \"code\": \"information_card\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"сейф\",\r",
											"            \"code\": \"safe\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"минеральная вода\",\r",
											"            \"code\": \"mineral_water\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"посудомоечная машина\",\r",
											"            \"code\": \"dishwasher\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"пресс для глажения брюк\",\r",
											"            \"code\": \"trouser_press\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"стиральная машина\",\r",
											"            \"code\": \"washing_machine\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"чайник\",\r",
											"            \"code\": \"kettle\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"мини-кухня\",\r",
											"            \"code\": \"mini_kitchen\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"кухонный уголок\",\r",
											"            \"code\": \"kitchenette\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"москитная сетка\",\r",
											"            \"code\": \"window_screen\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"стаканы и чашки\",\r",
											"            \"code\": \"glasses\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"две спальни\",\r",
											"            \"code\": \"two_bedrooms\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"кабинет\",\r",
											"            \"code\": \"cabinet\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"ламинат\",\r",
											"            \"code\": \"laminate\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"мангал\",\r",
											"            \"code\": \"outdoor_grill\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"уничтожитель мусора, встроенный в раковину\",\r",
											"            \"code\": \"garbage_disposal\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"кухонная посуда\",\r",
											"            \"code\": \"cookware\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"три спальни\",\r",
											"            \"code\": \"three_bedrooms\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"стиральная машина и сушилка\",\r",
											"            \"code\": \"washer_dryer\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"три комнаты\",\r",
											"            \"code\": \"three_rooms\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"тостер\",\r",
											"            \"code\": \"toaster\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"плиточное покрытие\",\r",
											"            \"code\": \"tile_covering\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"пробковый пол\",\r",
											"            \"code\": \"cork_flooring\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"паркет\",\r",
											"            \"code\": \"hardwood_floors\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"меню подушек\",\r",
											"            \"code\": \"pillows_menu\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"принадлежности для барбекю\",\r",
											"            \"code\": \"barbecue_facilities\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"ковровое покрытие\",\r",
											"            \"code\": \"carpet_covering\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"центральное кондиционирование\",\r",
											"            \"code\": \"central_air_conditioning\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"сушилка для белья\",\r",
											"            \"code\": \"clothes_airer\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"кофейный столик\",\r",
											"            \"code\": \"coffee_end_tables\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"косметическое зеркало\",\r",
											"            \"code\": \"cosmetic_mirror\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"обеденная зона\",\r",
											"            \"code\": \"dinner_zone\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"туалетный столик\",\r",
											"            \"code\": \"dresser\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"питьевая вода\",\r",
											"            \"code\": \"drinking_water\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"столовые приборы\",\r",
											"            \"code\": \"flatware\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"четыре комнаты\",\r",
											"            \"code\": \"four_rooms\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"высокие потолки\",\r",
											"            \"code\": \"high_ceilings\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"кухонная утварь\",\r",
											"            \"code\": \"kitchen_utensils\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"гостиная зона\",\r",
											"            \"code\": \"living_area\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"Номер для некурящих\",\r",
											"            \"code\": \"non_smoking_room\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"открытый бассейн\",\r",
											"            \"code\": \"pool\"\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"\r",
											"const idealTerraria = {\r",
											"    \"name\": \"Внешняя территория и вид из окон\",\r",
											"    \"amenities\": [\r",
											"        {\r",
											"            \"name\": \"балкон\",\r",
											"            \"code\": \"balcony\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"балкон с красивым видом\",\r",
											"            \"code\": \"balcony_with_view\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"балкон с шезлонгом\",\r",
											"            \"code\": \"balcony_with_deck_chairs\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"лоджия\",\r",
											"            \"code\": \"loggia\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"терраса\",\r",
											"            \"code\": \"terrace\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"форточка\",\r",
											"            \"code\": \"window_leaf\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"вид во двор\",\r",
											"            \"code\": \"court_view\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"вид на ипподром\",\r",
											"            \"code\": \"view_race_track\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"вид на озеро\",\r",
											"            \"code\": \"lake_view\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"вид на горы\",\r",
											"            \"code\": \"mountain_view\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"вид на стадион\",\r",
											"            \"code\": \"view_to_stadium\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"окна выходят в атриум отеля\",\r",
											"            \"code\": \"window_to_hotel_atrium\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"отдельный вход в номер\",\r",
											"            \"code\": \"private_room_entrance\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"вид на город\",\r",
											"            \"code\": \"city_view\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"панорамные окна\",\r",
											"            \"code\": \"floor_to_ceiling_windows\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"вид на сад\",\r",
											"            \"code\": \"garden_view\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"вид на парк\",\r",
											"            \"code\": \"park_view\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"вид на реку\",\r",
											"            \"code\": \"river_view\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"вид на море\",\r",
											"            \"code\": \"sea_view\"\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"\r",
											"const idealBath = {\r",
											"    \"name\": \"Ванная комната\",\r",
											"    \"amenities\": [\r",
											"        {\r",
											"            \"name\": \"ванная комната\",\r",
											"            \"code\": \"bathroom\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"ванна или душевая кабина\",\r",
											"            \"code\": \"bath_or_shower\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"гидромассажная ванна\",\r",
											"            \"code\": \"hydromassage_bath\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"биде\",\r",
											"            \"code\": \"bidet\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"банные полотенца\",\r",
											"            \"code\": \"bath_towels\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"тапочки\",\r",
											"            \"code\": \"slippers\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"две ванные комнаты\",\r",
											"            \"code\": \"two_bathrooms\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"душевая кабина\",\r",
											"            \"code\": \"shower_cabin\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"ванна\",\r",
											"            \"code\": \"bathtub\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"ванная с джакузи\",\r",
											"            \"code\": \"jacuzzi_bathroom\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"аэромассажная ванна\",\r",
											"            \"code\": \"aeromassage_bath\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"гидромассажный душ\",\r",
											"            \"code\": \"hydromassage_shower\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"санузел\",\r",
											"            \"code\": \"bathroom_with_wc\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"дополнительный санузел\",\r",
											"            \"code\": \"additional_bathroom_with_wc\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"дополнительная ванная комната\",\r",
											"            \"code\": \"additional_bathroom\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"водонагреватель\",\r",
											"            \"code\": \"water_heater\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"теплый пол\",\r",
											"            \"code\": \"warm_floor\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"банные принадлежности\",\r",
											"            \"code\": \"bathroom_amenities\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"халаты\",\r",
											"            \"code\": \"bathrobe\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"пляжные полотенца\",\r",
											"            \"code\": \"beach_towels\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"гигиенические средства\",\r",
											"            \"code\": \"hygienic_aids\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"косметические средства\",\r",
											"            \"code\": \"beauty_aids\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"сауна\",\r",
											"            \"code\": \"sauna\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"гостиничная парфюмерия\",\r",
											"            \"code\": \"bathroom_amenity_set\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"три ванные комнаты\",\r",
											"            \"code\": \"three_bathrooms\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"туалет\",\r",
											"            \"code\": \"toilet\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"Раздельный санузел\",\r",
											"            \"code\": \"separate_closet\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"раковина\",\r",
											"            \"code\": \"sink\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"туалетные средства\",\r",
											"            \"code\": \"toiletry\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"общая ванная комната\",\r",
											"            \"code\": \"shared_bathroom\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"унитаз\",\r",
											"            \"code\": \"toilet_bowl\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"внешняя ванная комната\",\r",
											"            \"code\": \"outside_bathroom\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"санузел на этаже\",\r",
											"            \"code\": \"shared_bathroom_and_toilet_on_floor\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"душ\",\r",
											"            \"code\": \"shower\"\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"\r",
											"const idealVideo = {\r",
											"    \"name\": \"Video dan audio\",\r",
											"    \"amenities\": [\r",
											"        {\r",
											"            \"name\": \"телевизор\",\r",
											"            \"code\": \"tv\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"спутниковое телевидение\",\r",
											"            \"code\": \"satellite_television\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"DVD-плеер\",\r",
											"            \"code\": \"dvd_player\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"два телевизора\",\r",
											"            \"code\": \"two_tv\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"кабельное телевидение\",\r",
											"            \"code\": \"cable_television\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"интерактивное телевидение\",\r",
											"            \"code\": \"interactive_web_tv\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"подборка видео/аудио\",\r",
											"            \"code\": \"movies\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"домашний кинотеатр\",\r",
											"            \"code\": \"home_cinema\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"караоке\",\r",
											"            \"code\": \"karaoke\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"музыкальный центр\",\r",
											"            \"code\": \"media_center\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"телевизор с плоским экраном\",\r",
											"            \"code\": \"flat_screen_TV\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"HBO (Американская телевизионная сеть)\",\r",
											"            \"code\": \"hbo\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"китайский канал\",\r",
											"            \"code\": \"chinese_channel\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"цифровое тв\",\r",
											"            \"code\": \"digital_tv\"\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"\r",
											"const idealInternet = {\r",
											"    \"name\": \"Internet dan telephone\",\r",
											"    \"amenities\": [\r",
											"        {\r",
											"            \"name\": \"Wi-Fi-интернет\",\r",
											"            \"code\": \"wifi_internet\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"интернет\",\r",
											"            \"code\": \"internet\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"внутренний телефон\",\r",
											"            \"code\": \"in_room_telephone\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"телефон\",\r",
											"            \"code\": \"telephone\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"IP-телефон\",\r",
											"            \"code\": \"ip_telephone\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"две телефонные линии\",\r",
											"            \"code\": \"two_line_phone\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"роутер\",\r",
											"            \"code\": \"121\"\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"\r",
											"const idealFurniture = {\r",
											"    \"name\": \"Мебель\",\r",
											"    \"amenities\": [\r",
											"        {\r",
											"            \"name\": \"стулья\",\r",
											"            \"code\": \"chairs\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"диван\",\r",
											"            \"code\": \"sofa_bed\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"шкаф для одежды\",\r",
											"            \"code\": \"closet_for_clothes\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"журнальный столик\",\r",
											"            \"code\": \"journal_table\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"комод\",\r",
											"            \"code\": \"commode\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"ковер\",\r",
											"            \"code\": \"carpet\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"диван-кровать\",\r",
											"            \"code\": \"studio_couch\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"стул\",\r",
											"            \"code\": \"chair\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"кресла\",\r",
											"            \"code\": \"armchairs\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"тумбы\",\r",
											"            \"code\": \"nightstands\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"гардеробная\",\r",
											"            \"code\": \"wardrobe\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"вешалки\",\r",
											"            \"code\": \"hangers\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"письменный стол\",\r",
											"            \"code\": \"desk\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"стол для переговоров\",\r",
											"            \"code\": \"conference_table\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"обеденный стол\",\r",
											"            \"code\": \"dinner_table\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"багажная тумба\",\r",
											"            \"code\": \"luggage_stand\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"барная стойка\",\r",
											"            \"code\": \"bar\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"зеркало\",\r",
											"            \"code\": \"mirror\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"пуфики\",\r",
											"            \"code\": \"padded_stools\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"эксклюзивная мебель\",\r",
											"            \"code\": \"exclusive_furniture\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"мебельный гарнитур\",\r",
											"            \"code\": \"furniture set\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"стол\",\r",
											"            \"code\": \"table\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"раскладной диван\",\r",
											"            \"code\": \"folding_sofa\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"раскладное кресло\",\r",
											"            \"code\": \"folding_armchair\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"шкаф-купе\",\r",
											"            \"code\": \"sliding_door_wardrobe\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"кресло\",\r",
											"            \"code\": \"armchair\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"тумба\",\r",
											"            \"code\": \"nightstand\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"мягкая мебель\",\r",
											"            \"code\": \"soft_furniture\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"туалетный столик\",\r",
											"            \"code\": \"toilet_table\"\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"\r",
											"const idealElektronik = {\r",
											"    \"name\": \"Elektronik\",\r",
											"    \"amenities\": [\r",
											"        {\r",
											"            \"name\": \"холодильник\",\r",
											"            \"code\": \"refrigerator\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"кондиционер\",\r",
											"            \"code\": \"air_conditioning\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"система климат-контроля\",\r",
											"            \"code\": \"air_conditioning_individually_controlled_in_room\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"настольные лампы\",\r",
											"            \"code\": \"desk_lamps\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"кулер\",\r",
											"            \"code\": \"cooler\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"фен\",\r",
											"            \"code\": \"hairdryer\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"электронные весы\",\r",
											"            \"code\": \"scales\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"будильник\",\r",
											"            \"code\": \"alarm_clock\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"система безопасности\",\r",
											"            \"code\": \"security_system\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"электронные замки\",\r",
											"            \"code\": \"electronic_locks\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"плита для приготовления пищи\",\r",
											"            \"code\": \"stove\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"отопление\",\r",
											"            \"code\": \"heating\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"мини-холодильник\",\r",
											"            \"code\": \"mini_fridge\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"кулер на этаже\",\r",
											"            \"code\": \"cooler_on_the_floor\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"USB\",\r",
											"            \"code\": \"usb\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"система умный дом\",\r",
											"            \"code\": \"smart_house\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"светильник\",\r",
											"            \"code\": \"lamp\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"вентилятор\",\r",
											"            \"code\": \"fan\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"кофемашина\",\r",
											"            \"code\": \"coffee_machine\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"микроволновая печь\",\r",
											"            \"code\": \"microwave\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"утюг\",\r",
											"            \"code\": \"iron\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"радио\",\r",
											"            \"code\": \"radio\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"обогреватель\",\r",
											"            \"code\": \"heater\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"персональный компьютер\",\r",
											"            \"code\": \"pc\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"факс\",\r",
											"            \"code\": \"fax\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"магнитофон\",\r",
											"            \"code\": \"magnitofon\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"сплит-система\",\r",
											"            \"code\": \"split_air_conditioning_system\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"Фанкойл\",\r",
											"            \"code\": \"fan_coil\"\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"\r",
											"const idealEquip =  {\r",
											"    \"name\": \"Оборудование и электроника\",\r",
											"    \"amenities\": [\r",
											"        {\r",
											"            \"name\": \"телефон\",\r",
											"            \"code\": \"phone\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"рабочий стол\",\r",
											"            \"code\": \"work_table\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"мультиварка\",\r",
											"            \"code\": \"multi\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"напольная вешалка\",\r",
											"            \"code\": \"veshalka\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"Кухонная варежка\",\r",
											"            \"code\": \"kitchen_mitten\"\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"\r",
											"const idealBeds =   {\r",
											"    \"name\": \"Кровати\",\r",
											"    \"amenities\": [\r",
											"        {\r",
											"            \"name\": \"три односпальные кровати\",\r",
											"            \"code\": \"three_single_beds\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"кровать «King size»\",\r",
											"            \"code\": \"king_bed\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"две односпальные кровати\",\r",
											"            \"code\": \"two_single_beds\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"гипоаллергенное белье\",\r",
											"            \"code\": \"hypoallergenic_linen\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"ортопедический матрас\",\r",
											"            \"code\": \"orthopedic_mattress\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"двуспальная кровать\",\r",
											"            \"code\": \"double_bed\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"две полутороспальные кровати\",\r",
											"            \"code\": \"two_full_beds\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"односпальная кровать\",\r",
											"            \"code\": \"single_bed\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"две односпальные или большая двуспальная кровать\",\r",
											"            \"code\": \"two_single_or_big_double_bed\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"две кровати \\\"Queen size\\\"\",\r",
											"            \"code\": \"two_queen_size_beds\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"кровать «Queen size»\",\r",
											"            \"code\": \"queen_bed\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"три двуспальные кровати\",\r",
											"            \"code\": \"three_double_beds\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"раскладушка\",\r",
											"            \"code\": \"126\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"три полутороспальные кровати\",\r",
											"            \"code\": \"three_full_beds\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"две двуспальные кровати\",\r",
											"            \"code\": \"two_double_beds\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"полутороспальная кровать\",\r",
											"            \"code\": \"full_bed\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"детская кровать\",\r",
											"            \"code\": \"child_rollaway\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"шесть односпальных кроватей\",\r",
											"            \"code\": \"six_beds\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"две кровати \\\"King size\\\"\",\r",
											"            \"code\": \"two_king_size_beds\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"двухъярусные кровати\",\r",
											"            \"code\": \"bunk_beds\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"кроватка\",\r",
											"            \"code\": \"krovatka\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"пять односпальных кроватей\",\r",
											"            \"code\": \"five_single_beds\"\r",
											"        },\r",
											"        {\r",
											"            \"name\": \"четыре односпальные кровати\",\r",
											"            \"code\": \"four_beds\"\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"\r",
											"pm.test('\"Кровати\" in response matches reference', function () {\r",
											"    const isEqual = _.isEqual(idealBeds, jsonData[0]);\r",
											"    pm.expect(isEqual).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test('\"Оборудование и электроника\" in response matches reference', function () {\r",
											"    const isEqual = _.isEqual(idealEquip, jsonData[1]);\r",
											"    pm.expect(isEqual).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test('\"Elektronik\" in response matches reference', function () {\r",
											"    const isEqual = _.isEqual(idealElektronik, jsonData[2]);\r",
											"    pm.expect(isEqual).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test('\"Мебель\" in response matches reference', function () {\r",
											"    const isEqual = _.isEqual(idealFurniture, jsonData[3]);\r",
											"    pm.expect(isEqual).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test('\"Internet dan telephone\" in response matches reference', function () {\r",
											"    const isEqual = _.isEqual(idealInternet, jsonData[4]);\r",
											"    pm.expect(isEqual).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test('\"Video dan audio\" in response matches reference', function () {\r",
											"    const isEqual = _.isEqual(idealVideo, jsonData[5]);\r",
											"    pm.expect(isEqual).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test('\"Ванная комната\" in response matches reference', function () {\r",
											"    const isEqual = _.isEqual(idealBath, jsonData[6]);\r",
											"    pm.expect(isEqual).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test('\"Внешняя территория и вид из окон\" in response matches reference', function () {\r",
											"    const isEqual = _.isEqual(idealTerraria, jsonData[7]);\r",
											"    pm.expect(isEqual).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test('\"Прочее\" in response matches reference', function () {\r",
											"    const isEqual = _.isEqual(idealOther, jsonData[8]);\r",
											"    pm.expect(isEqual).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test('\"Видео/аудио\" in response matches reference', function () {\r",
											"    const isEqual = _.isEqual(idealVideoAudio, jsonData[9]);\r",
											"    pm.expect(isEqual).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test('\"Интернет/телефония\" in response matches reference', function () {\r",
											"    const isEqual = _.isEqual(idealInternetPhone, jsonData[10]);\r",
											"    pm.expect(isEqual).to.be.true;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "X-API-KEY",
										"value": "{{ApIKEY}}",
										"type": "default"
									}
								],
								"url": {
									"raw": "https://{{Host}}/api/content/v1/room-amenity-categories",
									"protocol": "https",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"content",
										"v1",
										"room-amenity-categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "room-amenity-categories (unauthorized)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ------ Response header param test\r",
											"\r",
											"pm.test(\"Response code is 401\", function () {\r",
											"    pm.response.to.have.status(401); \r",
											"});\r",
											"\r",
											"pm.test(\"Response time < 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response code contain string 'Unauthorizedt'\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response headers is valid\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
											"    pm.response.to.have.header(\"X-Request-ID\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"});\r",
											"\r",
											"\r",
											"// ------ Content tests\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"const responseSchema = {\r",
											"  \"title\": \"Generated schema for Root\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"message\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test('JSON schema is correct', function () {\r",
											"  pm.response.to.have.jsonSchema(responseSchema);\r",
											"});\r",
											"\r",
											"pm.test(\"Partial data validation in response body\", function () {\r",
											"    pm.expect(jsonData.message).to.include(\"Unauthorized\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "X-API-KEY",
										"value": "BAD_BOY",
										"type": "default"
									}
								],
								"url": {
									"raw": "https://{{Host}}/api/content/v1/room-amenity-categories",
									"protocol": "https",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"content",
										"v1",
										"room-amenity-categories"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}